{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/generators-in-python","result":{"data":{"markdownRemark":{"html":"<h2 id=\"simple-generators\" style=\"position:relative;\">Simple generators<a href=\"#simple-generators\" aria-label=\"simple generators permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>A quick tutorial on how to make generators. We want to achieve this simple behavior and the same output:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     print<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span></code></pre></div>\n<p>Define a function where each call to 'yield' makes a new step in the loop that uses this generator:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token operator\">>></span><span class=\"token operator\">></span> def gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.         yield i\n<span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     print<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span></code></pre></div>\n<p>Here is where the interesting stuff starts. What if on each step you have more than one value ready to deliver. Then there is such thing as 'yield from'</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token operator\">>></span><span class=\"token operator\">></span> def gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.         yield from <span class=\"token punctuation\">(</span>i, <span class=\"token number\">100</span> - i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     print<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">0</span>\n<span class=\"token number\">100</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">99</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">98</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">97</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">96</span></code></pre></div>\n<p>The way how yield stops the execution in the generator itself is strange for my brain, so here's one more test: what if we have 2 loops, in what order the yield will be called?</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span data-user=root data-host=localhost></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token operator\">>></span><span class=\"token operator\">></span> def gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.         yield i\n<span class=\"token punctuation\">..</span>.     <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.         yield <span class=\"token number\">100</span> - i\n<span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     print<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">100</span>\n<span class=\"token number\">99</span>\n<span class=\"token number\">98</span>\n<span class=\"token number\">97</span>\n<span class=\"token number\">96</span></code></pre></div>\n<h2 id=\"generators-in-machine-learning\" style=\"position:relative;\">Generators in Machine Learning<a href=\"#generators-in-machine-learning\" aria-label=\"generators in machine learning permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p><em>Note:</em> this is an part of <a href=\"https://stackoverflow.com/questions/62090925/how-to-get-data-generator-more-efficient\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">my answer</a> following <a href=\"/blog/practice-skills-on-stackoverflow\">my investigation</a> of a random question on Stack Overflow. All for the bounty hunt ;)</p>\n<p>I have found <a href=\"https://github.com/anujshah1003/custom_data_generator\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">GitHub repository</a> and 3 part video tutorial on YouTube that mainly focuses <a href=\"http://www.jessicayung.com/using-generators-in-python-to-train-machine-learning-models/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">on the benefits</a> of using generator functions in Python.\nThe data is based on <a href=\"https://www.kaggle.com/alxmamaev/flowers-recognition\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this kaggle</a>.</p>\n<p>You do not need to write a data generator from scratch, though it is not hard, but inventing the wheel is not productive.</p>\n<ul>\n<li>Keras has the <a href=\"https://keras.io/api/preprocessing/image/#imagedatagenerator-class\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">ImageDataGenerator</a> class.</li>\n<li>Plus here is a more generic example for <a href=\"https://stanford.edu/~shervine/blog/keras-how-to-generate-data-on-the-fly\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">DataGenerator</a>.</li>\n<li>Tensorflow offers <a href=\"https://www.tensorflow.org/api_docs/python/tf/data/Dataset\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">very neat pipelines</a> with their <code class=\"language-text\">tf.data.Dataset</code>.</li>\n</ul>\n<p>Nevertheless, to solve the kaggle's task, the model needs to perceive single images only, hence the model is a simple deep CNN. If you combine 8 random characters (classes) into one image to <a href=\"https://machinelearningmastery.com/object-recognition-with-deep-learning/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">recognize multiple classes</a> at once, you need R-CNN or YOLO as your model. I just recently opened for myself <a href=\"https://github.com/AlexeyAB/darknet\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">YOLO v4</a>, and it is possible to make it work for specific task really quick.</p>","excerpt":"Simple generators A quick tutorial on how to make generators. We want to achieve this simple behavior and the same output: Define a function…","tableOfContents":"<ul>\n<li><a href=\"#simple-generators\">Simple generators</a></li>\n<li><a href=\"#generators-in-machine-learning\">Generators in Machine Learning</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/d74871b0-ed16-55b1-8608-0417cee4d702.jpg"},"frontmatter":{"date":"July 31, 2022","published":"July 31, 2022","lastModified":"July 31, 2022","title":"Generators in Python","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/generators-in-python.md","url":"/code/generators-in-python","next":{"excerpt":"If you have started using git years ago, then you already have habits and your preferred ways of doing things. But new versions introduce…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/git-tips-for-old-dogs.md","frontmatter":{"title":"Git tips for old dogs","date":"2022-09-18T00:00:00.000Z","topic":null,"article":null},"id":"ef1ed0ed-740b-59f3-a352-b02e38b244ac"},"previous":{"excerpt":"How do I obtain an HTTP access token from to work with BitBucket through API? Here is my answer Get access token Atlassian has vast…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/bitbucket-101-get-access-token.md","frontmatter":{"title":"BitBucket 101 - access token","date":"2022-07-21T00:00:00.000Z","topic":null,"article":null},"id":"f2c3d3ac-e79f-52dd-b627-301fe574104f"},"recentArticles":[{"excerpt":"Then here is the list of alternatives Intel-IPP Links: https://software.intel.com/en-us/intel-ipp , https://github.com/intel/ipp-crypto…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/if-you-hate-openssl.md","frontmatter":{"title":"If you hate OpenSSL","date":"2024-05-10T00:00:00.000Z","topic":null,"article":null},"id":"0c36d8cc-31d2-582b-9929-51cf8bed8920"},{"excerpt":"cool thing for the background (play it together with egzod - royalty) nice globe  Cool WebGL examples (no code, sad)","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/webgl.md","frontmatter":{"title":"WebGL","date":"2023-07-17T00:00:00.000Z","topic":null,"article":null},"id":"1bbe4c4e-2cc1-5fec-a2ca-b8cefdbfc6ee"},{"excerpt":"Check that you have ESLint extension installed. (Optional) While you are playing with linters and VS Code extensions, you can think about a…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/eslint-for-gatsby-howto.md","frontmatter":{"title":"ESLint in VS Code for Gatsby 5 blog","date":"2023-05-29T00:00:00.000Z","topic":null,"article":null},"id":"5953c80a-01e6-56c1-985e-bb9c0b1f340b"},{"excerpt":"The reason behind \"connect, disconnect and then connect again\" behavior might be that the old socket was still listening because it was half…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/how-to-close-tcp-socket-in-nodejs.md","frontmatter":{"title":"How to close TCP socket in Node.js","date":"2023-02-02T00:00:00.000Z","topic":null,"article":null},"id":"e7b7740f-e7b4-565f-a843-05bf8c27fda3"},{"excerpt":"When does verification happen? From this wiki it seems like the get function does it. What security level to use? https://www.openssl.org…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/ssl-tls-client-socket-with-openssl.md","frontmatter":{"title":"SSL/TLS client socket with OpenSSL","date":"2023-01-26T00:00:00.000Z","topic":null,"article":null},"id":"1f2b456a-3ea6-5863-a966-8579f11b39bd"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}