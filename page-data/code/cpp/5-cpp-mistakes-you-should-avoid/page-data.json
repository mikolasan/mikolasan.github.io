{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/5-cpp-mistakes-you-should-avoid","result":{"data":{"markdownRemark":{"html":"<h2 id=\"using-raw-pointers\" style=\"position:relative;\">Using raw pointers<a href=\"#using-raw-pointers\" aria-label=\"using raw pointers permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step and start accessing private fields while the object is still <code class=\"language-text\">nullptr</code>.</p>\n<h2 id=\"skipping-virtual-destructor-in-base-class\" style=\"position:relative;\">Skipping virtual destructor in base class<a href=\"#skipping-virtual-destructor-in-base-class\" aria-label=\"skipping virtual destructor in base class permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Base<span class=\"token operator\">*</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// only base class destructor called</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The fix is easy. Add the <code class=\"language-text\">virtual</code> keyword to the destructor of the base class.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now when we call <code class=\"language-text\">delete</code> on <code class=\"language-text\">b</code>, both the destructor for <code class=\"language-text\">Base</code> and the destructor for <code class=\"language-text\">Derived</code> are called,</p>\n<h2 id=\"return-a-reference-from-method\" style=\"position:relative;\">Return a reference from method<a href=\"#return-a-reference-from-method\" aria-label=\"return a reference from method permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>The problem with returning a reference from a method is that the reference may become invalid or even refer to an object that no longer exists</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_value<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> m_value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> init <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{</span>  \n        Example <span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        value <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 42</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ex goes out of scope, m_value is destroyed</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> value <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined behavior!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"pointer-parameter-in-a-function\" style=\"position:relative;\">Pointer parameter in a function<a href=\"#pointer-parameter-in-a-function\" aria-label=\"pointer parameter in a function permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>If you pass a pointer to a function as a parameter then you cannot assign it to another pointer within the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">assignPointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> newPtr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dynamically allocate memory for new integer</span>\n    ptr <span class=\"token operator\">=</span> newPtr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// assign new pointer to function parameter</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assignPointer</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pass pointer to function</span>\n    <span class=\"token comment\">// ptr still points to nullptr, memory leak occurs</span>\n    <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined behavior, as ptr was never assigned a valid address</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"1-for-null-terminated-strings\" style=\"position:relative;\">+1 for null terminated strings<a href=\"#1-for-null-terminated-strings\" aria-label=\"1 for null terminated strings permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>The null character <code class=\"language-text\">\\0'</code> is used to indicate the end of the string. When we allocate memory for a string, we must make sure to allocate enough space for the string and one extra byte for the null character.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span> <span class=\"token comment\">// for std::memcpy and std::strlen</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> <span class=\"token comment\">// for std::cout and std::endl</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>size_t len <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// missing the null character</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Copied string: \"</span> <span class=\"token operator\">&lt;&lt;</span> buf <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// length will extend to the first 0 found in memory</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","tableOfContents":"<ul>\n<li><a href=\"#using-raw-pointers\">Using raw pointers</a></li>\n<li><a href=\"#skipping-virtual-destructor-in-base-class\">Skipping virtual destructor in base class</a></li>\n<li><a href=\"#return-a-reference-from-method\">Return a reference from method</a></li>\n<li><a href=\"#pointer-parameter-in-a-function\">Pointer parameter in a function</a></li>\n<li><a href=\"#1-for-null-terminated-strings\">+1 for null terminated strings</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/48af4769-d500-5b6a-9cab-505d1cea055d.jpg"},"frontmatter":{"date":"May 13, 2023","published":"May 13, 2023","lastModified":"May 13, 2023","title":"5 C++ mistakes you should avoid","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","url":"/code/cpp/5-cpp-mistakes-you-should-avoid","next":{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},"previous":{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}