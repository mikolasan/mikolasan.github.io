{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/variadic-templates","result":{"data":{"markdownRemark":{"html":"<p>I found a use of variadic templates in C++. This is <code class=\"language-text\">constexpr</code> max function that finds the max element in the list of arguments at compile time. Very strange that the standard library doesn't have it.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">constexpr</span> T <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Rest<span class=\"token operator\">></span>\n<span class=\"token keyword\">constexpr</span> T <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>T a<span class=\"token punctuation\">,</span> Rest<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    T b <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> b <span class=\"token operator\">:</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">auto</span> max_value_1 <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> max_value_1 <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What I find strange is that variadic templates are not similar to variadic functions in C. I wanted to rewrite a C example with templates, but cannot figure this out. So here is just a C example.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdarg></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hint</span> <span class=\"token punctuation\">{</span>\n    COOL_ONE<span class=\"token punctuation\">,</span>\n    COOL_TWO<span class=\"token punctuation\">,</span>\n    COOL_THREE<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cool_function</span><span class=\"token punctuation\">(</span>Hint hint<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    va_list ap<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> hint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Hint<span class=\"token double-colon punctuation\">::</span>COOL_ONE<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"COOL ONE: \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> Hint<span class=\"token double-colon punctuation\">::</span>COOL_TWO<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"COOL TWO: \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> Hint<span class=\"token double-colon punctuation\">::</span>COOL_THREE<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> c_string <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size_t size <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"COOL THREE: \"</span> <span class=\"token operator\">&lt;&lt;</span> c_string <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Impossible!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cool_function</span><span class=\"token punctuation\">(</span>Hint<span class=\"token double-colon punctuation\">::</span>COOL_ONE<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cool_function</span><span class=\"token punctuation\">(</span>Hint<span class=\"token double-colon punctuation\">::</span>COOL_TWO<span class=\"token punctuation\">,</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> test_string <span class=\"token operator\">=</span> <span class=\"token string\">\"array of data\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cool_function</span><span class=\"token punctuation\">(</span>Hint<span class=\"token double-colon punctuation\">::</span>COOL_THREE<span class=\"token punctuation\">,</span> test_string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> test_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As usual all code for your experiments and slides are in <a href=\"https://github.com/mikolasan/cpp-skill/tree/master/variadic\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\"><strong>cpp-skill</strong> repository</a>.</p>\n<hr>\n<h2 id=\"similar-posts\" style=\"position:relative;\">Similar posts<a href=\"#similar-posts\" aria-label=\"similar posts permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li><a href=\"/code/cpp/pointing-arguments\">\"Pointing\" arguments</a></li>\n<li><a href=\"/code/cpp/const-ness\">const in C++</a></li>\n<li><a href=\"/code/cpp/exec-function\">C++ question: exec</a></li>\n<li><a href=\"/code/cpp/advanced-finite-state-machine\">C++ State Machine</a></li>\n<li><a href=\"/code/cpp/variadic-templates\">Variadic templates in C++</a></li>\n<li><a href=\"/code/cpp/leak-in-std-map\">Leak in std::map</a></li>\n</ul>","excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","tableOfContents":"<ul>\n<li><a href=\"#similar-posts\">Similar posts</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/d3fc025d-f936-5c27-95eb-a14465ee6003.jpg"},"frontmatter":{"date":"July 28, 2022","published":"August 24, 2022","lastModified":"September 08, 2022","title":"Variadic templates in C++","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","url":"/code/cpp/variadic-templates","next":{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},"previous":{"excerpt":"What will happen if I remove the virtual specifier from the class A? What will happen if I remove the virtual specifier from the classes A…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/virtual-call.md","frontmatter":{"title":"Virtual call in C++","date":"2022-07-07T00:00:00.000Z","topic":null,"article":null},"id":"737d40b3-c875-51a9-811f-1c9773843bb9"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}