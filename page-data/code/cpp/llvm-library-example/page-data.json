{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/llvm-library-example","result":{"data":{"markdownRemark":{"html":"<p>Here we will write a program that takes code from a <code class=\"language-text\">std::string</code> (need to find API that doesn't read files from local filesystem) and compiles it.\nThe output is an assembly code will be saved in another buffer that can be passed to another function or sent over the network etc.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>string code <span class=\"token operator\">=</span> <span class=\"token raw-string string\">R\"CODE(\n#include &lt;iostream>\nint main() {\n  std::cout &lt;&lt; \"hello wroRLDL\" &lt;&lt; std::endl;\n  return 0;\n}\n)CODE\"</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token double-colon punctuation\">::</span>string assembly <span class=\"token operator\">=</span> <span class=\"token function\">compileToAssembly</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"assembly: \"</span> <span class=\"token operator\">&lt;&lt;</span> assembly <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also we will compile LLVM library on Windows.</p>\n<p>This is my CMake</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">WIN32</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>LLVM_DIR <span class=\"token punctuation\">${</span><span class=\"token variable\">CMAKE_SOURCE_DIR</span><span class=\"token punctuation\">}</span>/thirdparty/windows/LLVM/lib/cmake/llvm<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>LLVM REQUIRED CONFIG<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Found LLVM <span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token variable\">LLVM_PACKAGE_VERSION</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">message</span><span class=\"token punctuation\">(</span>STATUS <span class=\"token string\">\"Using LLVMConfig.cmake in: <span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token variable\">LLVM_DIR</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_definitions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">${</span>LLVM_DEFINITIONS<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>code-to-assembly compile-to-asm.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># add_executable(code-to-assembly code-to-assembly.cpp)</span>\n\n<span class=\"token comment\"># Link against LLVM libraries</span>\n<span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>code-to-assembly <span class=\"token namespace\">PRIVATE</span> <span class=\"token punctuation\">${</span>LLVM_INCLUDE_DIRS<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_directories</span><span class=\"token punctuation\">(</span>code-to-assembly <span class=\"token namespace\">PRIVATE</span> <span class=\"token punctuation\">${</span>LLVM_LIBRARY_DIRS<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># https://llvm.org/docs/CMake.html#embedding-llvm-in-your-project</span>\n<span class=\"token comment\"># https://stackoverflow.com/questions/25782537/cmake-and-clang-tooling-linking-error-out-of-tree/25783251#25783251</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># $ thirdparty/windows/LLVM/bin/llvm-config.exe --components</span>\n\n<span class=\"token function\">llvm_map_components_to_libnames</span><span class=\"token punctuation\">(</span>llvm_libs\n  core\n  targetparser\n  x86info\n  <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>code-to-assembly \n  <span class=\"token namespace\">PRIVATE</span>\n  clangAnalysis\n  clangAST\n  clangASTMatchers\n  clangBasic\n  clangCodeGen\n  clangDriver\n  clangEdit\n  clangFrontend\n  clangLex\n  clangParse\n  clangSema\n  clangSerialization\n  clangSupport\n  clangTooling\n  <span class=\"token punctuation\">${</span>llvm_libs<span class=\"token punctuation\">}</span>\n  Version\n  <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Version.lib - https://learn.microsoft.com/en-us/windows/win32/api/winver/nf-winver-getfileversioninfosizew</span></code></pre></div>\n<p>/ to be continued... /</p>","excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","tableOfContents":"","fields":{"socialcard":"gatsby-plugin-social-card/9616cb95-794f-5989-9f26-f5a2995d3237.jpg"},"frontmatter":{"date":"February 24, 2025","published":"February 24, 2025","lastModified":"February 24, 2025","title":"LLVM library example","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","url":"/code/cpp/llvm-library-example","next":{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},"previous":{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}