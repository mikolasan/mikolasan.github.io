{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/about-template-method-pattern","result":{"data":{"markdownRemark":{"html":"<p>I usually find myself using inheritance when I need to store objects with different qualities in one place and process them later in similar manner. Probably iterating through all of them.</p>\n<p>When I first heard about object oriented concepts I thought that the most common use of it would be in the sharing common functionality from a base class by derived classes which in their turn have just small quirks. Consider canonical example about geometrical figures like rectangle and square.</p>\n<p>I stumbled upon one implementation from my coworkers where a subclass was extending operations from the base class, but it was strongly coupled with base class by order of execution. For each operation the base class is doing its thing, then calls private virtual function, moreover a pure abstract function, thus redirecting execution to its subclass.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">some_thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">do_thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">some_thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">do_thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To make such system run, one needs at least one dummy class that allows the base to do the thing and then do its dummy part - nothing and stop. Or make the second step customizable by subclasses.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subclass</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">do_thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Subclass call\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I hope you see how public interface can stay clear, while the second step is defined by private abstract functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Base<span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Subclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span><span class=\"token function\">thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wait. Private virtual? Does it make sense? Maybe protected virtual?</p>\n<p><a href=\"https://stackoverflow.com/questions/40615470/using-private-abstract-method-in-derived-class\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Apparently</a>, this is the Template Method pattern.</p>\n<p>Then I asked myself just a theoretical question. If in similar fashion a have private members and I need a getter, where this getter should be defined? Base class? Add virtual keyword?</p>\n<p>My iterations went to a dead end, my thought experiment is over, I knew from the beginning that for my purpose a <code class=\"language-text\">protected</code> member must be used.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span>base_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">get_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Base <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Child <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base: \"</span> <span class=\"token operator\">&lt;&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Child: \"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base (from Child): \"</span> <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Did you get any interesting thoughts for youself?</p>","excerpt":"I usually find myself using inheritance when I need to store objects with different qualities in one place and process them later in similar…","tableOfContents":"","fields":{"socialcard":"gatsby-plugin-social-card/65ddd418-403b-5d2d-8220-d0595e647f30.jpg"},"frontmatter":{"date":"April 07, 2021","published":"October 14, 2021","lastModified":"October 14, 2021","title":"About template method pattern in C++","subtitle":"Private abstract class method. Wat?","section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/about-template-method-pattern.md","url":"/code/cpp/about-template-method-pattern","next":{"excerpt":"Today I found this code extremely confusing.  C/C++ question What output do you expect? (disregard output from the long_process.sh script…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/exec-function.md","frontmatter":{"title":"C++ question: exec","date":"2021-07-06T00:00:00.000Z","topic":null,"article":null},"id":"36b3773e-0494-52d7-879a-04f52a1ff030"},"previous":{"excerpt":"Code TODO Reference https://stackoverflow.com/questions/4181784/how-to-set-socket-timeout-in-c-when-making-multiple-connections https…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/non-blocking-tcp-socket.md","frontmatter":{"title":"Non blocking TCP socket","date":"2021-04-06T00:00:00.000Z","topic":null,"article":null},"id":"51b346fd-80bf-5b3d-a440-e8d3a8e93030"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}