{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/render-and-logic","result":{"data":{"markdownRemark":{"html":"<p>I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera navigation and object selection.</p>\n<p>I have nodes and a graph class that defines connections between nodes, and I think there’s a choice here—a render class that includes logic (like in any game engine) or the logic includes rendering functions (which makes rendering optional).</p>\n<p>So let's say we have Neuron and Network classes. How to add optional rendering functionality in such a way that these classes would allow creation of objects without defining rendering functionality?</p>\n<p>I'm thinking about composition (school books about inheritance were so naïve…). But it should work in a way that the network can be defined (neurons added to it and connections configured) and just passed to a class that has bgfx initialized.</p>\n<p>Where either rendering data is added to the original classes</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">setup_scene</span><span class=\"token punctuation\">(</span>SNN<span class=\"token operator\">&amp;</span> net<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>neurons<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2.0f</span> <span class=\"token operator\">*</span> M_PI <span class=\"token operator\">/</span> N<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5.0f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5.0f</span><span class=\"token punctuation\">;</span>\n        net<span class=\"token punctuation\">.</span>neurons<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or in a separate context</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">SNNVisualContext <span class=\"token function\">generate_positions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SNN<span class=\"token operator\">&amp;</span> net<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    SNNVisualContext ctx<span class=\"token punctuation\">{</span>net<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> net<span class=\"token punctuation\">.</span>neurons<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> M_PI <span class=\"token operator\">/</span> net<span class=\"token punctuation\">.</span>neurons<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>positions<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So you add the logic class to renderer class. This way I cannot create pure logic neurons and add them to the net and be done with it. We will have neurons and a net and visual neurons and visual net, and this will require initializing them twice.</p>\n<p>Is there a way to define an interface that will add <code class=\"language-text\">draw</code> and <code class=\"language-text\">update</code> functions to Neuron and Network (SNN) and then when we call <code class=\"language-text\">net.draw()</code> and go through all neurons and call <code class=\"language-text\">draw()</code> on each neuron?</p>\n<p>We can do it with the strategy pattern.</p>","excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","tableOfContents":"","fields":{"socialcard":"gatsby-plugin-social-card/17b5d573-8291-53d9-8496-e9056eeef264.jpg"},"frontmatter":{"date":"June 24, 2025","published":"July 08, 2025","lastModified":"July 08, 2025","title":"Keep render and logic separate","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","url":"/code/cpp/render-and-logic","next":null,"previous":{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}