{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/advanced-finite-state-machine","result":{"data":{"markdownRemark":{"html":"<p>In one project, I decided to navigate through the steps of the installation wizard using a state machine.</p>\n<h2 id=\"first-example\" style=\"position:relative;\">First example<a href=\"#first-example\" aria-label=\"first example permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>Obviously the first thing to do is go to Stack Overflow and find <a href=\"https://stackoverflow.com/questions/14676709/c-code-for-state-machine\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this answer</a> with finite state machine code example. It simulates a vending machine.</p>\n<p>I visit <a href=\"https://github.com/hbarcelos/cpp-state-machine\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this repository</a>. I like the code style, structure, and I want to contribute ❤️</p>\n<p>I add CMake build system.</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>cpp-state-machine <span class=\"token property\">VERSION</span> <span class=\"token number\">1.0</span> LANGUAGES CXX<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD_REQUIRED</span> <span class=\"token boolean\">ON</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>PROJECT_SOURCES\n    main.cpp\n    Machine.cpp\n    MachineStates.cpp\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>vending-machine <span class=\"token punctuation\">${</span>PROJECT_SOURCES<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I switch to smart pointers, the state now is held by the <code class=\"language-text\">unique_ptr</code> and destructors become empty. You can check all changes in <a href=\"https://github.com/mikolasan/cpp-state-machine/tree/test\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">my fork</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Machine</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">Machine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _stock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">~</span><span class=\"token function\">Machine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>AbstractState<span class=\"token operator\">></span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Machine</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Machine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _stock<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">stock</span><span class=\"token punctuation\">(</span>_stock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> stock <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>AbstractState<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Normal<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>SoldOut<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">AbstractState</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>Machine <span class=\"token operator\">&amp;</span>machine<span class=\"token punctuation\">,</span> AbstractState <span class=\"token operator\">*</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  machine<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I add <a href=\"https://en.cppreference.com/w/cpp/language/override\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\"><code class=\"language-text\">override</code> keywords</a>. I check that the base destructor is virtual, because <a href=\"/code/cpp/5-cpp-mistakes-you-should-avoid/#skipping-virtual-destructor-in-base-class\">that's how it must be</a>, and it is the trivial destructor which I mark using the <a href=\"https://en.cppreference.com/w/cpp/keyword/default\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\"><code class=\"language-text\">default</code> keyword</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>  virtual void sell(Machine &amp;machine, unsignd int quantity);\n<span class=\"token prefix deleted\">-</span>  virtual void refill(Machine &amp;machine, unsigned int quantity);\n<span class=\"token prefix deleted\">-</span>  virtual void fix(Machine &amp;machine);\n<span class=\"token prefix deleted\">-</span>  virtual ~Normal();\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  virtual void sell(Machine &amp;machine, unsigned int quantity) override;\n<span class=\"token prefix inserted\">+</span>  virtual void refill(Machine &amp;machine, unsigned int quantity) override;\n<span class=\"token prefix inserted\">+</span>  virtual void fix(Machine &amp;machine) override</span></code></pre></div>\n<p>But I want to push it further. Do you know the trick how to restrict users of your interface from using destructors directly? You make the destructor protected. Protected, but not virtual <a href=\"https://stackoverflow.com/questions/8970466/is-there-a-use-for-making-a-protected-destructor-virtual\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this time</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProtectedDestructor</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">ProtectedDestructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[ProtectedDestructor] constructor\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">ProtectedDestructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[ProtectedDestructor] destructor\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ProtectedDestructor<span class=\"token operator\">*</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ProtectedDestructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: \"ProtectedDestructor::~ProtectedDestructor()\" (declared at line 9) is inaccessible</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But it left me stymied.</p>\n<h2 id=\"dynamic-state-machine\" style=\"position:relative;\">Dynamic state machine<a href=\"#dynamic-state-machine\" aria-label=\"dynamic state machine permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>But I realize, that I need a <em>dynamic</em> state machine, because I don't know how many nodes I need in it before compilation time.</p>\n<p>Some <a href=\"https://sii.pl/blog/implementing-a-state-machine-in-c17/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">good finding</a> that looks good, but didn't help.</p>\n<p>For factory class I used <code class=\"language-text\">...</code>-feature (<a href=\"https://en.cppreference.com/w/cpp/language/parameter_pack\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">parameter pack</a>) which in simple words does: and the rest just pass to the next interested party.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">STATEFACTORY_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STATEFACTORY_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stagestate.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StateFactory</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>\n    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Types <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// STATEFACTORY_H</span></span></code></pre></div>\n<p>Base state</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">BASESTATE_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BASESTATE_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseState</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">BaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">BaseState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> stateName<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n        <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>stateName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">BaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>BaseState<span class=\"token operator\">></span> errorState<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doNext</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>BaseState<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doBack</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>BaseState<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>BaseState<span class=\"token operator\">></span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// BASESTATE_H</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">STATE_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STATE_H</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"basestate.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseState</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n        <span class=\"token function\">BaseState</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> prevState<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> nextState<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doNext</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>BaseState<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> state<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doBack</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>BaseState<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> state<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// STATE_H</span></span></code></pre></div>\n<p>And implementation</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>list<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">>></span> stages<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">auto</span> factory <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>StateFactory<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> prevState<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> state <span class=\"token operator\">=</span> factory<span class=\"token operator\">-></span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>stepId<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stages<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            prevState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            state<span class=\"token operator\">-></span>prevState <span class=\"token operator\">=</span> prevState<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_group<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                prevState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            stages<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>nextState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stages<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>// TODO: create a list of bars to visit and the final state where you go home</p>\n<hr>\n<h2 id=\"similar-posts\" style=\"position:relative;\">Similar posts<a href=\"#similar-posts\" aria-label=\"similar posts permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li><a href=\"/code/cpp/pointing-arguments\">\"Pointing\" arguments</a></li>\n<li><a href=\"/code/cpp/const-ness\">const in C++</a></li>\n<li><a href=\"/code/cpp/exec-function\">C++ question: exec</a></li>\n<li><a href=\"/code/cpp/advanced-finite-state-machine\">C++ State Machine</a></li>\n<li><a href=\"/code/cpp/variadic-templates\">Variadic templates in C++</a></li>\n<li><a href=\"/code/cpp/leak-in-std-map\">Leak in std::map</a></li>\n</ul>","excerpt":"In one project, I decided to navigate through the steps of the installation wizard using a state machine. First example Obviously the first…","tableOfContents":"<ul>\n<li><a href=\"#first-example\">First example</a></li>\n<li><a href=\"#dynamic-state-machine\">Dynamic state machine</a></li>\n<li><a href=\"#similar-posts\">Similar posts</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/e399ed1e-798c-5bb5-8f1c-53548dbb654f.jpg"},"frontmatter":{"date":"October 01, 2021","published":"October 14, 2021","lastModified":"September 08, 2022","title":"Advanced Finite State Machine","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/advanced-finite-state-machine.md","url":"/code/cpp/advanced-finite-state-machine","next":{"excerpt":"Copied code from Sending string over UDP in C++.\nC-style code in C++ question. Let's make this solution to be a real C++ answer! order of…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/send-udp-packet-example.md","frontmatter":{"title":"Send UDP packet example","date":"2021-10-04T00:00:00.000Z","topic":null,"article":null},"id":"148dc2ff-9fd6-52b9-b9a5-264d6fc1e542"},"previous":{"excerpt":"gist link: https://gist.github.com/mikolasan/a90ae8db29803a2519fed9f812aeb2ee CMakeLists.txt pcap_reader.cpp Reference library https…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/how-to-read-pcap-file-in-cpp.md","frontmatter":{"title":"How to read pcap file in C++","date":"2021-10-01T00:00:00.000Z","topic":null,"article":null},"id":"96bcc9e6-e308-5055-a518-8ca936f770cb"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}