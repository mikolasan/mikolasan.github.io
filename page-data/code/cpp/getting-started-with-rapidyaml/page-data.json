{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/cpp/getting-started-with-rapidyaml","result":{"data":{"markdownRemark":{"html":"<p>gist link: <a href=\"https://gist.github.com/mikolasan/d9306a03b23a9a85e4166e69810414b1\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://gist.github.com/mikolasan/d9306a03b23a9a85e4166e69810414b1</a>\nStackOverflow answer: <a href=\"https://stackoverflow.com/a/69552155/1104612\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://stackoverflow.com/a/69552155/1104612</a></p>\n<ol>\n<li>Add the lib into your repository as a submodule <code class=\"language-text\">git submodule add https://github.com/biojppm/rapidyaml rapidyaml</code></li>\n<li>Recursively initialize this submodule <code class=\"language-text\">git submodule update --init --recursive rapidyaml</code></li>\n<li>Alternatively (instead of 1. and 2.)\n<ul>\n<li>clone repository <code class=\"language-text\">git clone --recursive https://github.com/biojppm/rapidyaml</code>,</li>\n<li>remove <code class=\"language-text\">.git</code>,</li>\n<li>then cut and paste into your source tree</li>\n</ul>\n</li>\n<li>Update your CMakeLists.txt\n<ul>\n<li>build the library <code class=\"language-text\">add_subdirectory(rapidyaml)</code></li>\n<li>find headers <code class=\"language-text\">target_include_directories(test PRIVATE rapidyaml/src)</code></li>\n<li>link the lib <code class=\"language-text\">target_link_libraries(test ryml)</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"cmakeliststxt\" style=\"position:relative;\">CMakeLists.txt<a href=\"#cmakeliststxt\" aria-label=\"cmakeliststxt permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>rapidyaml_getting_started <span class=\"token property\">VERSION</span> <span class=\"token number\">0.0.1</span> LANGUAGES CXX<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_CXX_STANDARD_REQUIRED</span> <span class=\"token boolean\">ON</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_subdirectory</span><span class=\"token punctuation\">(</span>rapidyaml<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>test main.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>test <span class=\"token namespace\">PRIVATE</span> rapidyaml/src<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>test ryml<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"maincpp\" style=\"position:relative;\">main.cpp<a href=\"#maincpp\" aria-label=\"maincpp permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ryml_std.hpp></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ryml.hpp></span></span>\n\nstd<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">get_file_contents</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">in</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"could not open \"</span> <span class=\"token operator\">&lt;&lt;</span> filename <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token double-colon punctuation\">::</span>ostringstream contents<span class=\"token punctuation\">;</span>\n    contents <span class=\"token operator\">&lt;&lt;</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    std<span class=\"token double-colon punctuation\">::</span>string contents <span class=\"token operator\">=</span> <span class=\"token function\">get_file_contents</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ryml<span class=\"token double-colon punctuation\">::</span>Tree tree <span class=\"token operator\">=</span> ryml<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>ryml<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_csubstr</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ryml<span class=\"token double-colon punctuation\">::</span>NodeRef show_mapping <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ryml<span class=\"token double-colon punctuation\">::</span>NodeRef <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> child <span class=\"token operator\">:</span> show_mapping<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"key: \"</span> <span class=\"token operator\">&lt;&lt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" val: \"</span> <span class=\"token operator\">&lt;&lt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"gist link: https://gist.github.com/mikolasan/d9306a03b23a9a85e4166e69810414b1\nStackOverflow answer: https://stackoverflow.com/a/6955215…","tableOfContents":"<ul>\n<li><a href=\"#cmakeliststxt\">CMakeLists.txt</a></li>\n<li><a href=\"#maincpp\">main.cpp</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/1667ef1a-748b-5ba7-9a49-491af6a354eb.jpg"},"frontmatter":{"date":"October 13, 2021","published":"August 02, 2022","lastModified":"August 02, 2022","title":"Getting started with rapidyaml","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/getting-started-with-rapidyaml.md","url":"/code/cpp/getting-started-with-rapidyaml","next":{"excerpt":"Honestly, I encounter this problem not for the first time ☹️ Because after languages like Java, Python, JavaScript where non trivial objects…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/pointing-arguments.md","frontmatter":{"title":"\"Pointing\" arguments","date":"2021-11-01T00:00:00.000Z","topic":null,"article":null},"id":"95a057e8-0371-5732-8998-81184235723a"},"previous":{"excerpt":"Copied code from Sending string over UDP in C++.\nC-style code in C++ question. Let's make this solution to be a real C++ answer! order of…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/send-udp-packet-example.md","frontmatter":{"title":"Send UDP packet example","date":"2021-10-04T00:00:00.000Z","topic":null,"article":null},"id":"148dc2ff-9fd6-52b9-b9a5-264d6fc1e542"},"recentArticles":[{"excerpt":"I need to visualize dynamic spiking neuron activity. I want to use C++ with OpenGL via a scene graph/engine layer with easy camera…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/render-and-logic.md","frontmatter":{"title":"Keep render and logic separate","date":"2025-06-24T00:00:00.000Z","topic":null,"article":null},"id":"17b5d573-8291-53d9-8496-e9056eeef264"},{"excerpt":"Here we will write a program that takes code from a  (need to find API that doesn't read files from local filesystem) and compiles it.\nThe…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/llvm-library-example.md","frontmatter":{"title":"LLVM library example","date":"2025-02-24T00:00:00.000Z","topic":null,"article":null},"id":"9616cb95-794f-5989-9f26-f5a2995d3237"},{"excerpt":"Using raw pointers Most often leads to the problem of not following the rule of three/five/zero. Also easy to skip the initialization step…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/5-cpp-mistakes-you-should-avoid.md","frontmatter":{"title":"5 C++ mistakes you should avoid","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"48af4769-d500-5b6a-9cab-505d1cea055d"},{"excerpt":"On this blog Containerized builds with Docker C++ Cross-platform Serial Port libraries Other blogs Fluent {C++} Jonathan Boccara's blog C…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/resources.md","frontmatter":{"title":"C++ resources","date":"2023-05-13T00:00:00.000Z","topic":null,"article":null},"id":"d8327cb6-c43c-59e8-8bbf-5e35f59a0f7f"},{"excerpt":"I found a use of variadic templates in C++. This is  max function that finds the max element in the list of arguments at compile time. Very…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/cpp/variadic-templates.md","frontmatter":{"title":"Variadic templates in C++","date":"2022-07-28T00:00:00.000Z","topic":null,"article":null},"id":"d3fc025d-f936-5c27-95eb-a14465ee6003"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}