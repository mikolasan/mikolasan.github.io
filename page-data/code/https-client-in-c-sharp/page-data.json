{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/https-client-in-c-sharp","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>Check <a href=\"/linux/ssl-certificates\">this page</a> on how to get a thumbprint for a certificate</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">TortoiseUWP<span class=\"token punctuation\">.</span>Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Security</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Cryptography<span class=\"token punctuation\">.</span>X509Certificates</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TortoiseUWP</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TortoiseCommunication</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CertificateStore</span> appStore <span class=\"token operator\">=</span> CertificateStores<span class=\"token punctuation\">.</span><span class=\"token function\">GetStoreByName</span><span class=\"token punctuation\">(</span>StandardCertificateStoreNames<span class=\"token punctuation\">.</span>Personal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HttpClient</span> client<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">X509Certificate2</span> webCertificate<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Certificate</span> winCertificate<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StatusCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">TortoiseCommunication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClientHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            handler<span class=\"token punctuation\">.</span>ClientCertificateOptions <span class=\"token operator\">=</span> ClientCertificateOption<span class=\"token punctuation\">.</span>Manual<span class=\"token punctuation\">;</span>\n            handler<span class=\"token punctuation\">.</span>ClientCertificates<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span>webCertificate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            handler<span class=\"token punctuation\">.</span>ServerCertificateCustomValidationCallback <span class=\"token operator\">=</span> ServerCertificateCustomValidation<span class=\"token punctuation\">;</span>\n            client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>SystemStatus<span class=\"token punctuation\">></span></span> <span class=\"token function\">getSystemStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> host<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StatusCallback</span> statusCallback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Connecting to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">host</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>host <span class=\"token operator\">+</span> <span class=\"token string\">\"/status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> status <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">DeserializeObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Status<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">.</span>System<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequestException</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>InnerException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">setSetting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> host<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StatusCallback</span> statusCallback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Connecting to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">host</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Patch</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">host</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/settings/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token interpolation-string\"><span class=\"token string\">$\"{{\\\"value\\\":</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">value</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">}}\"</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> stuff <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span><span class=\"token function\">DeserializeObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> saved <span class=\"token operator\">=</span> stuff<span class=\"token punctuation\">.</span>saved<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Setting </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> saved: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">saved</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> saved<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSetting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> host<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> settingName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StatusCallback</span> statusCallback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Connecting to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">host</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">host</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/settings/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">settingName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> stuff <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span><span class=\"token function\">DeserializeObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> stuff<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Setting </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">settingName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">value</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">statusCallback</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ServerCertificateCustomValidation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequestMessage</span> requestMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">X509Certificate2</span> certificate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">X509Chain</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SslPolicyErrors</span> sslErrors<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//System.Diagnostics.Debug.WriteLine($\"Requested URI: {requestMessage.RequestUri}\");</span>\n            <span class=\"token comment\">//System.Diagnostics.Debug.WriteLine($\"Effective date: {certificate.GetEffectiveDateString()}\");</span>\n            <span class=\"token comment\">//System.Diagnostics.Debug.WriteLine($\"Exp date: {certificate.GetExpirationDateString()}\");</span>\n            <span class=\"token comment\">//System.Diagnostics.Debug.WriteLine($\"Issuer: {certificate.Issuer}\");</span>\n            <span class=\"token comment\">//System.Diagnostics.Debug.WriteLine($\"Subject: {certificate.Subject}\");</span>\n\n            <span class=\"token comment\">// uncomment this line if commercial CAs are allowed to issue certificate for your service.</span>\n            <span class=\"token comment\">//if ((sslErrors &amp; (SslPolicyErrors.None)) > 0) { return true; }</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span>sslErrors <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>SslPolicyErrors<span class=\"token punctuation\">.</span>RemoteCertificateNameMismatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n                <span class=\"token punctuation\">(</span>sslErrors <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>SslPolicyErrors<span class=\"token punctuation\">.</span>RemoteCertificateNotAvailable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// get last chain element that should contain root CA certificate</span>\n            <span class=\"token comment\">// but this may not be the case in partial chains</span>\n            <span class=\"token class-name\">X509Certificate2</span> projectedRootCert <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span>ChainElements<span class=\"token punctuation\">[</span>chain<span class=\"token punctuation\">.</span>ChainElements<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>projectedRootCert<span class=\"token punctuation\">.</span>Thumbprint <span class=\"token operator\">!=</span> <span class=\"token string\">\"072BD03B877F056D444E8A3986B60B925ECD3F4E\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// execute certificate chaining engine and ignore only \"UntrustedRoot\" error</span>\n            <span class=\"token class-name\">X509Chain</span> customChain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">X509Chain</span>\n            <span class=\"token punctuation\">{</span>\n                ChainPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                    VerificationFlags <span class=\"token operator\">=</span> X509VerificationFlags<span class=\"token punctuation\">.</span>AllowUnknownCertificateAuthority<span class=\"token punctuation\">,</span>\n                    RevocationMode <span class=\"token operator\">=</span> X509RevocationMode<span class=\"token punctuation\">.</span>NoCheck\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> retValue <span class=\"token operator\">=</span> customChain<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>ChainElements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// RELEASE unmanaged resources behind X509Chain class.</span>\n            customChain<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> retValue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> uri<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">HttpResponseMessage</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureSuccessStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> responseBody <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> responseBody<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Patch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> uri<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> contentType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stringContent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">,</span> contentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">HttpResponseMessage</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">PatchAsync</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> stringContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureSuccessStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> responseBody <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> responseBody<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> uri<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> contentType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stringContent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringContent</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">,</span> contentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">HttpResponseMessage</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> stringContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">EnsureSuccessStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> responseBody <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> responseBody<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\">References<a href=\"#references\" aria-label=\"references permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-6.0\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-6.0</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows/uwp/networking/httpclient\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/windows/uwp/networking/httpclient</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26218764/patch-async-requests-with-windows-web-http-httpclient-class\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://stackoverflow.com/questions/26218764/patch-async-requests-with-windows-web-http-httpclient-class</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.applicationdatacontainer?view=winrt-22000#methods\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/uwp/api/windows.storage.applicationdatacontainer?view=winrt-22000#methods</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/answers/questions/4410/accessing-certificate-in-code-with-thumbprint.html\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/answers/questions/4410/accessing-certificate-in-code-with-thumbprint.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9810887/export-x509certificate2-to-byte-array-with-the-private-key\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://stackoverflow.com/questions/9810887/export-x509certificate2-to-byte-array-with-the-private-key</a></li>\n</ul>\n<h2 id=\"port-uwp-to-linux\" style=\"position:relative;\">Port UWP to Linux<a href=\"#port-uwp-to-linux\" aria-label=\"port uwp to linux permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li><a href=\"https://platform.uno/docs/articles/get-started-with-linux.html#setting-up-for-archlinux-5814-or-later--manjaro\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://platform.uno/docs/articles/get-started-with-linux.html#setting-up-for-archlinux-5814-or-later--manjaro</a></li>\n<li><a href=\"https://ian.bebbs.co.uk/posts/UnoLinux\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://ian.bebbs.co.uk/posts/UnoLinux</a></li>\n</ul>","excerpt":"Check this page on how to get a thumbprint for a certificate References https://docs.microsoft.com/en-us/dotnet/api/system.net.http…","tableOfContents":"<ul>\n<li><a href=\"#references\">References</a></li>\n<li><a href=\"#port-uwp-to-linux\">Port UWP to Linux</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/bb82af88-0a71-5420-8d2d-50c16a341086.jpg"},"frontmatter":{"date":"January 12, 2022","published":"January 12, 2022","lastModified":"January 12, 2022","title":"HTTPS client in C#","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/https-client-in-c-sharp.md","url":"/code/https-client-in-c-sharp","next":{"excerpt":"I choose Pipeline project in Jenkins, this allows me to create one Groovy script instead of doing it in GUI that may not support all…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/build-godot-game-with-jenkins.md","frontmatter":{"title":"Build Godot game with Jenkins","date":"2022-02-01T00:00:00.000Z","topic":null,"article":null},"id":"aee9da37-bdbd-5b6a-a69e-749a27944780"},"previous":{"excerpt":"Features nonblocking socket server messages divided by a newline, broken packages concatenated before parsing sending messages to server…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/simple-tcp-client-python.md","frontmatter":{"title":"Simple Python TCP client","date":"2022-01-01T00:00:00.000Z","topic":null,"article":null},"id":"9ef32c90-b9b4-54f2-8dc9-84a29b51d341"},"recentArticles":[{"excerpt":"Then here is the list of alternatives Intel-IPP Links: https://software.intel.com/en-us/intel-ipp , https://github.com/intel/ipp-crypto…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/if-you-hate-openssl.md","frontmatter":{"title":"If you hate OpenSSL","date":"2024-05-10T00:00:00.000Z","topic":null,"article":null},"id":"0c36d8cc-31d2-582b-9929-51cf8bed8920"},{"excerpt":"cool thing for the background (play it together with egzod - royalty) nice globe  Cool WebGL examples (no code, sad)","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/webgl.md","frontmatter":{"title":"WebGL","date":"2023-07-17T00:00:00.000Z","topic":null,"article":null},"id":"1bbe4c4e-2cc1-5fec-a2ca-b8cefdbfc6ee"},{"excerpt":"Check that you have ESLint extension installed. (Optional) While you are playing with linters and VS Code extensions, you can think about a…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/eslint-for-gatsby-howto.md","frontmatter":{"title":"ESLint in VS Code for Gatsby 5 blog","date":"2023-05-29T00:00:00.000Z","topic":null,"article":null},"id":"5953c80a-01e6-56c1-985e-bb9c0b1f340b"},{"excerpt":"The reason behind \"connect, disconnect and then connect again\" behavior might be that the old socket was still listening because it was half…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/how-to-close-tcp-socket-in-nodejs.md","frontmatter":{"title":"How to close TCP socket in Node.js","date":"2023-02-02T00:00:00.000Z","topic":null,"article":null},"id":"e7b7740f-e7b4-565f-a843-05bf8c27fda3"},{"excerpt":"When does verification happen? From this wiki it seems like the get function does it. What security level to use? https://www.openssl.org…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/ssl-tls-client-socket-with-openssl.md","frontmatter":{"title":"SSL/TLS client socket with OpenSSL","date":"2023-01-26T00:00:00.000Z","topic":null,"article":null},"id":"1f2b456a-3ea6-5863-a966-8579f11b39bd"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}