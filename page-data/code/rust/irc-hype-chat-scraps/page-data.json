{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/rust/irc-hype-chat-scraps","result":{"data":{"markdownRemark":{"html":"<h2 id=\"about\" style=\"position:relative;\">About<a href=\"#about\" aria-label=\"about permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>I just started the development (May 2023). It's not my main side project, quite the opposite, this very random idea for practicing crazy stuff in between really important projects when it becomes boring even there.</p>\n<p>Essentially this should become a normal IRC client and IRC server. But not that many people use IRC these days (at least me), so I'll focus on enhancing functionality of this simple, as it might seem, chat application.</p>\n<p>Many hype features will be implemented first, even before core functionalities – this is the approach in this project.</p>\n<h2 id=\"functions\" style=\"position:relative;\">Functions<a href=\"#functions\" aria-label=\"functions permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>I found it missing in whatsapp (of course it was a mistake to use it for business communications).\nSearch/filter messages in a group chat <strong>by specific user</strong>. Like if a person said one important message 3 months ago, so it could be the first in the search. But whatsapp limits how far you can manually scroll (at least on desktop/web), though you can search, but that was a link. <strong>search by links/media</strong> is another way to get what I need.</p>\n<h2 id=\"roadmap\" style=\"position:relative;\">Roadmap<a href=\"#roadmap\" aria-label=\"roadmap permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li>End-to-end encryption with <a href=\"https://en.wikipedia.org/wiki/Off-the-record_messaging\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Off-the-record messaging</a>.</li>\n<li>WebID authentication. DM communication stored in a Solid Pod</li>\n<li>Personalization: color schemes, user profile, content recommendation and filtering</li>\n<li>Video and audio calls</li>\n<li>Integration with third-party services: sharing files via google drive or dropbox, adding gifs to messages, displaying what is currently playing in your playlist</li>\n<li>The highest encryption level. User can manually select who can read their messages by sending decryption key, but then can revoke keys and change encryption and thus making all data hidden again.</li>\n<li>Runs on desktop and mobile</li>\n<li>Easy to develop new plugins: another integrations, another protocols, UI extensions</li>\n<li>Blogging platform</li>\n<li>Podcast platform</li>\n<li>Other features from <a href=\"https://friendi.ca/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Friendica</a>: integration with RSS, email, expiring content</li>\n<li>...</li>\n</ul>\n<h2 id=\"irc-protocol\" style=\"position:relative;\">IRC protocol<a href=\"#irc-protocol\" aria-label=\"irc protocol permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li><a href=\"https://modern.ircdocs.horse/index.html\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Modern IRC Client Protocol</a></li>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc2812\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">(RFC 2812) Internet Relay Chat: Client Protocol</a></li>\n</ul>\n<h2 id=\"countdown\" style=\"position:relative;\">Countdown<a href=\"#countdown\" aria-label=\"countdown permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>To create a range loop that iterates from 5 down to 1 in Rust, you can use the rev method on a range. Here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">..=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wait to reconnect ({})...\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>we use a range from 1 to 5 inclusive (1..=5) and then call the rev method to iterate over the range in reverse order.</p>\n<h2 id=\"command-pattern\" style=\"position:relative;\">Command pattern<a href=\"#command-pattern\" aria-label=\"command pattern permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>You can use the command design pattern by defining a trait that represents an IRC command, and then defining structs that implement that trait for each command.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">IrcCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">NickCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Fields for the NickCommand struct</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">IrcCommand</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">NickCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Implementation for the NickCommand</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using an abstract factory to create command objects based on a command string can be a good way to decouple the command parsing and execution logic. The <code class=\"language-text\">create_command</code> method uses a <code class=\"language-text\">match</code> statement to create a new instance of the appropriate command struct based on the command name, or returns <code class=\"language-text\">None</code> if the command name is unknown.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">CommandFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create_command</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> command_name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">IrcCommand</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">DefaultCommandFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">CommandFactory</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">DefaultCommandFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create_command</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> command_name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token class-name\">IrcCommand</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> command_name<span class=\"token punctuation\">.</span><span class=\"token function\">to_uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"NICK\"</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NickCommand</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Initialize NickCommand fields */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"JOIN\"</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinCommand</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Initialize JoinCommand fields */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// Add other commands here...</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And instead of</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token string\">\"NICK\"</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cmd <span class=\"token operator\">=</span> <span class=\"token class-name\">NickCommand</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Initialize NickCommand fields */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"JOIN\"</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cmd <span class=\"token operator\">=</span> <span class=\"token class-name\">JoinCommand</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Initialize JoinCommand fields */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    cmd<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n_ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unknown command: {}\\r\\n\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will have</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>command_object<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">create_command</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    command_object<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using this approach, you can easily swap out the <code class=\"language-text\">CommandFactory</code> implementation to use a different set of commands, or to allow plugins to define new commands without modifying the server code.</p>\n<h2 id=\"non-blocking-tcp-client\" style=\"position:relative;\">Non blocking TCP client<a href=\"#non-blocking-tcp-client\" aria-label=\"non blocking tcp client permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>In client's implementation messages should be sent and received asynchronously. While a user can trigger special messages and send them non blocking, the client can receive responses to old and new messages in the background</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">handle_server</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TcpStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">,</span> write<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">tokio<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token class-name\">CancellationToken</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> cloned_token <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> reader <span class=\"token operator\">=</span> <span class=\"token class-name\">BufReader</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> read_handle <span class=\"token operator\">=</span> <span class=\"token namespace\">tokio<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">move</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process_server_responses</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> write_handle <span class=\"token operator\">=</span> <span class=\"token namespace\">tokio<span class=\"token punctuation\">::</span></span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">move</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process_user_input</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cloned_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    read_handle<span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    write_handle<span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"solid-pods\" style=\"position:relative;\">Solid Pods<a href=\"#solid-pods\" aria-label=\"solid pods permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>Exactly said - alongside. IRC protocol defines the basics of communication design: channels, private messages, moderators. It's implemented in many popular platforms like Slack and Discord. But they are all centralized. I want to add decentralization feature to IRC by using Pods if it's possible.</p>\n<p>create an IRC client that is integrated with Solid Pods. This client could store IRC data, such as channels and private messages, in the user's Solid Pod. The client could also use decentralized authentication, such as WebID, to authenticate users without relying on a centralized server.</p>\n<p>Another approach would be to create a Solid Pod server that can act as an IRC server. This would allow users to connect to the IRC network using a decentralized, peer-to-peer architecture, rather than relying on a centralized server. The Solid Pod server could use existing IRC clients, such as IRCCloud or HexChat, to communicate with users.</p>\n<p>Both of these approaches would require some development work to implement, but they could provide a way to add decentralization features to IRC using Solid Pods.</p>\n<h2 id=\"fractal-matrix-client\" style=\"position:relative;\">Fractal (Matrix client)<a href=\"#fractal-matrix-client\" aria-label=\"fractal matrix client permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p><a href=\"https://gitlab.gnome.org/GNOME/fractal\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Fractal</a> - Matrix group messaging app</p>\n<h3 id=\"how-to-build-on-windows\" style=\"position:relative;\">How to build on Windows<a href=\"#how-to-build-on-windows\" aria-label=\"how to build on windows permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h3>\n<p>To test that you have all native libraries installed, run build through meson</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">meson setup build</code></pre></div>\n<p>GTK4 bindings for Rust done through <a href=\"https://gtk-rs.org/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this crate</a>. So they assume that one already have GTK4 installed natively.\nAnd <a href=\"https://gtk-rs.org/gtk4-rs/stable/latest/book/installation_windows.html\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this</a> is how we install GTK4 using MSVC toolchain.\nI'm going to follow the <a href=\"https://github.com/wingtk/gvsbuild#development-environment\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">gvsbuild docs</a> to build GTK 4.</p>\n<p>Updated <strong>chocolatey</strong> just in case (the last time I used this tool in 2018 when I built <a href=\"/projects/my-morrowind\">Open Morrowind</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">mkdir</span> gtk-build\n<span class=\"token builtin class-name\">cd</span> gtk-build\n<span class=\"token function\">mkdir</span> github\n<span class=\"token builtin class-name\">cd</span> github\n<span class=\"token function\">git</span> clone https://github.com/wingtk/gvsbuild.git\n<span class=\"token builtin class-name\">cd</span> gvsbuild</code></pre></div>\n<p>Open Anaconda PowerShell prompt (I installed <strong>miniconda</strong> <a href=\"/blog/starcode\">here</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">python <span class=\"token operator\">-</span>m venv <span class=\"token punctuation\">.</span>venv\n<span class=\"token punctuation\">.</span>\\<span class=\"token punctuation\">.</span>venv\\Scripts\\activate<span class=\"token punctuation\">.</span>ps1\npip install <span class=\"token punctuation\">.</span>\ngvsbuild build gtk4 libadwaita gtksourceview5 gettext</code></pre></div>\n<p>Then make sip of tea 🍵</p>\n<p>Add <code class=\"language-text\">C:\\gtk-build\\gtk\\x64\\release\\bin</code> to user's <code class=\"language-text\">PATH</code>.</p>\n<p>GStrreamer. Make sure to run ninja from <strong>x64 Native Tools Command Prompt for VS 2022</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git\ncd gstreamer\npip install --user meson\nmeson configure\nmeson setup -Dbuildtype=release -Dprefix=\"c:/gtk-build/gstreamer/x64/debug/\" -Dtests=disabled -Dexamples=disabled -Dintrospection=disabled c:\\Users\\neupo\\develop\\gtk-build\\github\\gstreamer-build\nninja -C c:\\Users\\neupo\\develop\\gtk-build\\github\\gstreamer-build\ncd ..\\gstreamer-build\nmeson install</code></pre></div>\n<p>Or fix config later with <code class=\"language-text\">meson configure -Dtests=disabled -Dexamples=disabled -Dintrospection=disabled c:\\Users\\neupo\\develop\\gtk-build\\github\\gstreamer-build</code>. If you forgot to specify <code class=\"language-text\">prefix</code>, don't worry, it can be fixed on the install step by specifying <code class=\"language-text\">--destdir</code> (<a href=\"https://mesonbuild.com/Installing.html#destdir-support\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">ref</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://gitlab.gnome.org/GNOME/libshumate.git\ncd libshumate</code></pre></div>","excerpt":"About I just started the development (May 2023). It's not my main side project, quite the opposite, this very random idea for practicing…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#about\">About</a></p>\n</li>\n<li>\n<p><a href=\"#functions\">Functions</a></p>\n</li>\n<li>\n<p><a href=\"#roadmap\">Roadmap</a></p>\n</li>\n<li>\n<p><a href=\"#irc-protocol\">IRC protocol</a></p>\n</li>\n<li>\n<p><a href=\"#countdown\">Countdown</a></p>\n</li>\n<li>\n<p><a href=\"#command-pattern\">Command pattern</a></p>\n</li>\n<li>\n<p><a href=\"#non-blocking-tcp-client\">Non blocking TCP client</a></p>\n</li>\n<li>\n<p><a href=\"#solid-pods\">Solid Pods</a></p>\n</li>\n<li>\n<p><a href=\"#fractal-matrix-client\">Fractal (Matrix client)</a></p>\n<ul>\n<li><a href=\"#how-to-build-on-windows\">How to build on Windows</a></li>\n</ul>\n</li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/d89e1b08-4e3c-5697-b2b9-819b937aa057.jpg"},"frontmatter":{"date":"April 26, 2023","published":"May 05, 2023","lastModified":"May 05, 2023","title":"IRC \"hype\" chat","subtitle":"Interesting Rust code scraps","section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/rust/irc-hype-chat-scraps.md","url":"/code/rust/irc-hype-chat-scraps","next":null,"previous":null,"recentArticles":[{"excerpt":"About I just started the development (May 2023). It's not my main side project, quite the opposite, this very random idea for practicing…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/rust/irc-hype-chat-scraps.md","frontmatter":{"title":"IRC \"hype\" chat","date":"2023-04-26T00:00:00.000Z","topic":null,"article":null},"id":"d89e1b08-4e3c-5697-b2b9-819b937aa057"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}