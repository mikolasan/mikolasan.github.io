{"componentChunkName":"component---src-templates-blog-template-js","path":"/code/simple-tcp-client-python","result":{"data":{"markdownRemark":{"html":"<h2 id=\"features\" style=\"position:relative;\">Features<a href=\"#features\" aria-label=\"features permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li>nonblocking socket</li>\n<li>server messages divided by a newline, broken packages concatenated before parsing</li>\n<li>sending messages to server from standard input</li>\n<li>reconnect timer</li>\n<li>logger</li>\n</ul>\n<p>gist link: <a href=\"https://gist.github.com/mikolasan/7652bcd3ee5498c21541f53bce1c72ce\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://gist.github.com/mikolasan/7652bcd3ee5498c21541f53bce1c72ce</a></p>\n<h2 id=\"code\" style=\"position:relative;\">Code<a href=\"#code\" aria-label=\"code permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> errno\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> select\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Timer\n\n<span class=\"token comment\"># create logger</span>\nlogger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'test_client'</span><span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># create console handler and set level to debug</span>\nconsole_handler <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>StreamHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole_handler<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># create formatter</span>\nformatter <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>Formatter<span class=\"token punctuation\">(</span><span class=\"token string\">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class=\"token punctuation\">)</span>\n\nconsole_handler<span class=\"token punctuation\">.</span>setFormatter<span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span>\nlogger<span class=\"token punctuation\">.</span>addHandler<span class=\"token punctuation\">(</span>console_handler<span class=\"token punctuation\">)</span>\n\nTCP_HOST <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nTCP_PORT <span class=\"token operator\">=</span> <span class=\"token number\">32155</span>\nclient_socket <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\nserver_address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TCP_HOST<span class=\"token punctuation\">,</span> TCP_PORT<span class=\"token punctuation\">)</span>\nconnect_timeout <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nreconnect_delay <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nBUF_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">4096</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">connect_to_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> client_socket\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Connecting to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>server_address<span class=\"token punctuation\">}</span></span><span class=\"token string\">...'</span></span><span class=\"token punctuation\">)</span>\n        client_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>create_connection<span class=\"token punctuation\">(</span>server_address<span class=\"token punctuation\">,</span> connect_timeout<span class=\"token punctuation\">)</span>\n        client_socket<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        client_thread <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>client_communication<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        client_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>ConnectionError<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Connection error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span> \n        logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Reconnect in </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>reconnect_delay<span class=\"token punctuation\">}</span></span><span class=\"token string\"> seconds'</span></span><span class=\"token punctuation\">)</span>\n        client_socket <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        reconnect_timer <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span>reconnect_delay<span class=\"token punctuation\">,</span> connect_to_server<span class=\"token punctuation\">)</span>\n        reconnect_timer<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        reconnect_timer<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">client_communication</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    keep_connection <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token string\">b''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> keep_connection<span class=\"token punctuation\">:</span>\n        read_ready<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> s <span class=\"token keyword\">in</span> read_ready<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># The socket has data ready to be received</span>\n            continue_recv <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">while</span> continue_recv<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># Try to receive some data</span>\n                    <span class=\"token builtin\">buffer</span> <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>BUF_SIZE<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># no more data in the socket</span>\n                    continue_recv <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                    <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>errno <span class=\"token operator\">==</span> errno<span class=\"token punctuation\">.</span>EWOULDBLOCK<span class=\"token punctuation\">:</span>\n                        <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> process_buffer<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token comment\"># Error! Print it and tell main loop to stop</span>\n                        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Read error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n                        keep_connection <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>stdin <span class=\"token keyword\">in</span> read_ready<span class=\"token punctuation\">:</span>\n            text <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            message <span class=\"token operator\">=</span> text <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n            s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">process_buffer</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        messages <span class=\"token operator\">=</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token string\">b''</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> messages<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n            process_incoming_message<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">process_incoming_message</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        connect_to_server<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Program closed by the user\"</span><span class=\"token punctuation\">)</span></code></pre></div>","excerpt":"Features nonblocking socket server messages divided by a newline, broken packages concatenated before parsing sending messages to server…","tableOfContents":"<ul>\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#code\">Code</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/9ef32c90-b9b4-54f2-8dc9-84a29b51d341.jpg"},"frontmatter":{"date":"January 01, 2022","published":"August 02, 2022","lastModified":"August 02, 2022","title":"Simple Python TCP client","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/simple-tcp-client-python.md","url":"/code/simple-tcp-client-python","next":{"excerpt":"Check this page on how to get a thumbprint for a certificate References https://docs.microsoft.com/en-us/dotnet/api/system.net.http…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/https-client-in-c-sharp.md","frontmatter":{"title":"HTTPS client in C#","date":"2022-01-12T00:00:00.000Z","topic":null,"article":null},"id":"bb82af88-0a71-5420-8d2d-50c16a341086"},"previous":{"excerpt":"Add simple logger HTTPS client TCP server socket Plugin System Call Java from C","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/java-guide.md","frontmatter":{"title":"Java Guide","date":"2021-11-23T00:00:00.000Z","topic":null,"article":null},"id":"1b2712e0-77af-5ded-bda3-1e11adb6ba76"},"recentArticles":[{"excerpt":"Then here is the list of alternatives Intel-IPP Links: https://software.intel.com/en-us/intel-ipp , https://github.com/intel/ipp-crypto…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/if-you-hate-openssl.md","frontmatter":{"title":"If you hate OpenSSL","date":"2024-05-10T00:00:00.000Z","topic":null,"article":null},"id":"0c36d8cc-31d2-582b-9929-51cf8bed8920"},{"excerpt":"cool thing for the background (play it together with egzod - royalty) nice globe  Cool WebGL examples (no code, sad)","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/webgl.md","frontmatter":{"title":"WebGL","date":"2023-07-17T00:00:00.000Z","topic":null,"article":null},"id":"1bbe4c4e-2cc1-5fec-a2ca-b8cefdbfc6ee"},{"excerpt":"Check that you have ESLint extension installed. (Optional) While you are playing with linters and VS Code extensions, you can think about a…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/eslint-for-gatsby-howto.md","frontmatter":{"title":"ESLint in VS Code for Gatsby 5 blog","date":"2023-05-29T00:00:00.000Z","topic":null,"article":null},"id":"5953c80a-01e6-56c1-985e-bb9c0b1f340b"},{"excerpt":"The reason behind \"connect, disconnect and then connect again\" behavior might be that the old socket was still listening because it was half…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/how-to-close-tcp-socket-in-nodejs.md","frontmatter":{"title":"How to close TCP socket in Node.js","date":"2023-02-02T00:00:00.000Z","topic":null,"article":null},"id":"e7b7740f-e7b4-565f-a843-05bf8c27fda3"},{"excerpt":"When does verification happen? From this wiki it seems like the get function does it. What security level to use? https://www.openssl.org…","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/code/ssl-tls-client-socket-with-openssl.md","frontmatter":{"title":"SSL/TLS client socket with OpenSSL","date":"2023-01-26T00:00:00.000Z","topic":null,"article":null},"id":"1f2b456a-3ea6-5863-a966-8579f11b39bd"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}