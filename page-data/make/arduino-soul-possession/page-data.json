{"componentChunkName":"component---src-templates-blog-template-js","path":"/make/arduino-soul-possession","result":{"data":{"markdownRemark":{"html":"<p>This is the first step in <a href=\"/make/neuron-model\">my ambitious project</a> to create a successful geek product.</p>\n<p>So I have two AVR chips: <strong>ATMega8l-8pu</strong> and <strong>ATMega8a-8p</strong>.</p>\n<h2 id=\"specs\" style=\"position:relative;\">Specs<a href=\"#specs\" aria-label=\"specs permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p><a href=\"https://www.mouser.com/datasheet/2/268/Atmel_2486_8_bit_AVR_microcontroller_ATmega8_L_dat-1315266.pdf\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Datasheet</a></p>\n<p>For comparison I use ATMEga328p that I have on Arduino UNO R3 (that's a chinese clone from Open Smart) <a href=\"https://www.mouser.com/datasheet/2/268/ATmega48A_PA_88A_PA_168A_PA_328_P_DS_DS40002061B-1900559.pdf\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Datasheet</a></p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>ATMega8</th>\n<th>ATMega328P</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MCU name</td>\n<td>atmega8</td>\n<td>atmega328p</td>\n</tr>\n<tr>\n<td>Maximum Clock Frequency</td>\n<td>8 MHz</td>\n<td>20 MHz</td>\n</tr>\n<tr>\n<td>Data Bus Width</td>\n<td>8 bit</td>\n<td>8 bit</td>\n</tr>\n<tr>\n<td>ADC Resolution</td>\n<td>10 bit</td>\n<td>10 bit</td>\n</tr>\n<tr>\n<td>Number of ADC Channels</td>\n<td>6</td>\n<td>8</td>\n</tr>\n<tr>\n<td>Interface Type</td>\n<td>2-Wire, SPI, USART</td>\n<td>I2C, SPI, USART</td>\n</tr>\n<tr>\n<td>Number of I/Os</td>\n<td>23</td>\n<td>23</td>\n</tr>\n<tr>\n<td>Number of Timers/Counters</td>\n<td>3 Timers</td>\n<td>3 Timers</td>\n</tr>\n<tr>\n<td>Program Memory Size</td>\n<td>8 kB</td>\n<td>32 kB</td>\n</tr>\n<tr>\n<td>Data RAM Type</td>\n<td>SRAM</td>\n<td>SRAM</td>\n</tr>\n<tr>\n<td>Data RAM Size</td>\n<td>1 kB</td>\n<td>2 kB</td>\n</tr>\n<tr>\n<td>Data ROM Type</td>\n<td>EEPROM</td>\n<td>EEPROM</td>\n</tr>\n<tr>\n<td>Data ROM Size</td>\n<td>512 B</td>\n<td>1 kB</td>\n</tr>\n<tr>\n<td>Package / Case</td>\n<td>PDIP-28</td>\n<td>TQFP-32</td>\n</tr>\n<tr>\n<td>Dimensions (HxLxW)</td>\n<td>3.3 mm x 34.67 mm x 7.62 mm</td>\n<td>1 mm x 7 mm x 7 mm</td>\n</tr>\n<tr>\n<td>Supply Voltage</td>\n<td>2.7 V - 5.5 V</td>\n<td>1.8 V - 5.5 V</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"notes\" style=\"position:relative;\">Notes<a href=\"#notes\" aria-label=\"notes permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h3>\n<p><em>Note 1:</em> ATMega8 works on 1 MHz without external clock</p>\n<p><em>Note 2:</em> Interesting element I noticedâ€”anolog comparator. Only one. It seems, that this is what I'm looking. <a href=\"https://en.m.wikipedia.org/w/index.php?title=Comparator&#x26;section=Speed_and_power#Speed_and_power\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">According to wikipedia</a> I can find very fast comparators. Like <a href=\"https://www.ti.com/product/LMH7220\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">LMH7220</a></p>\n<h2 id=\"from-raspberry-pi-to-the-chip\" style=\"position:relative;\">From Raspberry Pi to the chip<a href=\"#from-raspberry-pi-to-the-chip\" aria-label=\"from raspberry pi to the chip permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>But as long as I remember there is a chicken-egg problem related to this microcontroller hobby: to flash one of them you need to make a jtag - device that communicates over USB with your computer and on special protocol it communicates between itself and another Atmega chip that you want to burn. Not literally though.</p>\n<p>Surely you can buy such thing. But I've got a question. Can I do it from Raspberry Pi? Apparently, yes! So I'm following <a href=\"https://learn.adafruit.com/program-an-avr-or-arduino-using-raspberry-pi-gpio-pins/programming\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this tutorial from Adafruit</a>, but it's not explaining how to install and use <strong>avr-gcc</strong>. It actually very simple.</p>\n<h3 id=\"main-question\" style=\"position:relative;\">Main question<a href=\"#main-question\" aria-label=\"main question permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h3>\n<p>My main question that cannot be highlighted even more by just writing it all caps (but I will not write it this way, because it's not polite): Why we don't use <a href=\"https://pinout.xyz/pinout/spi#\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">SPI pins</a>? If they are random pins, why not to chose all consecutive?</p>\n<h2 id=\"avr-gcc\" style=\"position:relative;\">avr-gcc<a href=\"#avr-gcc\" aria-label=\"avr gcc permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p><a href=\"https://www.nongnu.org/avr-libc/user-manual/install_tools.html\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Build from source</a>? No, just run</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> avr-libc binutils-avr gcc-avr</code></pre></div>\n<p>The hello world of microcontrollers blinking LED <strong>blink.c</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// F_CPU is only a way for you to *tell* _delay_ms() how fast your MCU is running</span>\n<span class=\"token comment\">// Note: set lfuse to 0xE4 to make AVR work at 8MHz</span>\n<span class=\"token comment\">// 8MHz</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">F_CPU</span> <span class=\"token expression\"><span class=\"token number\">8000000UL</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;avr/io.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;util/delay.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// each port consists of three registers DDRx PORTx, and PINx (for instance DDRA, PORTA, and PINA)</span>\n  DDRC <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> DDC1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Make pin 13 be an output.  </span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// use PORTx to control pin source</span>\n    PORTC <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> PORTC1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Turn the LED on.</span>\n    <span class=\"token function\">_delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PORTC <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> PORTC1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Turn the LED off.</span>\n    <span class=\"token function\">_delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Note: PINx is used for reading input states</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And it's make file.</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">MCU<span class=\"token operator\">=</span>atmega8\nCFLAGS<span class=\"token operator\">=</span>-g -Wall -mmcu<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>MCU<span class=\"token punctuation\">)</span> -Os\nLDFLAGS<span class=\"token operator\">=</span>-Wl,-gc-sections -Wl,-relax\nCC<span class=\"token operator\">=</span>avr-gcc\nOBJCOPY<span class=\"token operator\">=</span>avr-objcopy\nDUDE<span class=\"token operator\">=</span>avrdude\nTARGET<span class=\"token operator\">=</span>main\nPROGRAMMER_NAME<span class=\"token operator\">=</span>pi_1\n\n<span class=\"token target symbol\">all</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span>.hex\n\n<span class=\"token target symbol\">clean</span><span class=\"token punctuation\">:</span>\n\trm -f *.o *.hex *.obj *.hex\n\n<span class=\"token target symbol\">%.hex</span><span class=\"token punctuation\">:</span> %.obj\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJCOPY<span class=\"token punctuation\">)</span> -R .eeprom -O ihex <span class=\"token variable\">$&lt;</span> <span class=\"token variable\">$@</span>\n\n<span class=\"token target symbol\">%.obj</span><span class=\"token punctuation\">:</span> %.o\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CFLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$&lt;</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>LDFLAGS<span class=\"token punctuation\">)</span> -o <span class=\"token variable\">$@</span>\n\n<span class=\"token target symbol\">program</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span>.hex\n<span class=\"token target symbol\">\t<span class=\"token variable\">$</span>(DUDE) -p <span class=\"token variable\">$</span>(MCU) -c <span class=\"token variable\">$</span>(PROGRAMMER_NAME) -v -U flash</span><span class=\"token punctuation\">:</span>w<span class=\"token punctuation\">:</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span>.hex<span class=\"token punctuation\">:</span>i</code></pre></div>\n<p>I might go fancy and will create script for CMake. Or Gradle.</p>\n<p>Then build it</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">make</span></code></pre></div>\n<h2 id=\"connection\" style=\"position:relative;\">Connection<a href=\"#connection\" aria-label=\"connection permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<blockquote>\n<p>There are two power and two ground pins. They are NOT redundant. One set is Digital VCC and GND, the other is Analog VCC and GND. Ideally, you should use an inductor between the DVCC and AVCC pins, for noise sensitive analog circuits, <strong>but at the minimum, DVCC and AVCC should be connected, as should DGnd and AGnd.</strong> A decoupling cap for both (~0.1uf) is recommended as well, but you could just use one for DVCC/DGnd.</p>\n</blockquote>\n<p>Here is how: <a href=\"https://github.com/denilsonsa/atmega8-blinking-leds/blob/master/atmega8-blinking-leds.png\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">picture</a>\nOnly grounds are important to connect together <a href=\"http://code.rancidbacon.com/LearningAboutArduinoATMega8\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">according to this diagram</a></p>\n<p>Then check the connection</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo avrdude -p atmega8 -C avrdude_gpio.conf -c pi_1 -v</code></pre></div>\n<p>I'm using very sketchy breadboard that requires soldering but I keep all parts loose. Under no circumstances it can be a problem, but I get</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">avrdude: AVR device not responding</code></pre></div>\n<p>Sad face :(</p>\n<blockquote>\n<p>The usual debugging methodology for bitbang programmers involves to omit the target AVR, and shortcut MISO and MOSI. Then, run AVRDUDE with <code class=\"language-text\">-vvvv</code> (that's four option letters <strong>v</strong>), which will dump the entire low-level communication. You should see the programming enable sequence <code class=\"language-text\">AC 53 00 00</code> echoed back with an offset of one octet <code class=\"language-text\">FF FF 53 00</code>.</p>\n<p><a href=\"https://www.avrfreaks.net/forum/avrdude-device-not-responding\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">from</a></p>\n</blockquote>\n<p>I'm getting back the same <code class=\"language-text\">AC 53 00 00</code>. Strange.</p>\n<blockquote>\n<p>The Serial Programming instructions will not work if the communication is out of synchronization. When in sync. the second byte (0x53), will echo back when issuing the third byte of the Programming Enable instruction. Whether the echo is correct or not, all four bytes of the instruction must be transmitted. If the 0x53 did not echo back, give RESET a positive pulse and issue a new Programming Enable command</p>\n<p>AVR-microcontroller-ATmega8_L_datasheet</p>\n</blockquote>\n<p>I successfully tested the same procedure with a firm ISP connector on Arduino UNO R3. But I still think my chips are dead than it's the wiring.</p>\n<p>Test SPI <a href=\"https://importgeek.wordpress.com/2017/09/11/raspberry-pi-spi-loopback-testing/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://importgeek.wordpress.com/2017/09/11/raspberry-pi-spi-loopback-testing/</a></p>\n<p>Currently I'm going to use ATMega328P from Arduino UNO, but I'll try to find answers for these questions:</p>\n<ul>\n<li>Is it possible to use any GPIO pin on Raspberry Pi for SPI communication? Why not? Why only two marked?</li>\n<li>How to test ATMega8 chips if they are bricked or not? What minimum board/equipment is required?</li>\n</ul>\n<h2 id=\"from-arduino-to-atmega8\" style=\"position:relative;\">From Arduino to ATMega8<a href=\"#from-arduino-to-atmega8\" aria-label=\"from arduino to atmega8 permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>This is <a href=\"https://electronics.stackexchange.com/questions/205055/using-avrdude-to-program-attiny-via-arduino-as-isp\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">my path</a> now:</p>\n<ul>\n<li>Connect arduino to the laptop</li>\n<li>Install Arduino ISP sketch  on it (Arduino IDE 1.8.15: File -> Examples -> 11. ArduinoISP)</li>\n<li>Now forget that it's an Arduino that's connected to the laptopâ€”it's a programmer. While it's still connected to USB port, it communicates over serial protocol with the laptop, but it will use ISP on the side between itself (Arduino) and another chip. Be careful with serial communicationâ€”<a href=\"https://techbird.wordpress.com/2014/03/31/programming-atmega8-using-arduino-uno-rev3/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">use the same baud rate on both sides</a></li>\n<li>Connect ATMega8 to the programmer (miso, mosi, clk, reset, power, gnd)</li>\n<li>Run <code class=\"language-text\">avrdude</code> with programmer set to <code class=\"language-text\">avrisp</code> and flash ATMege chip with a program (hex file)</li>\n<li>Boom! ðŸ’¥</li>\n</ul>\n<p>Also <a href=\"https://create.arduino.cc/projecthub/hami/programming-atmega8-using-arduino-ide-90c2ad\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this</a> tutorial a bit off, but it shows how to connect a crystal to ATMega8</p>\n<h2 id=\"reference\" style=\"position:relative;\">Reference<a href=\"#reference\" aria-label=\"reference permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li>Blink example and makefile <a href=\"https://www.pololu.com/docs/0J83/6.3\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://www.pololu.com/docs/0J83/6.3</a></li>\n<li>Newbie mistakes review <a href=\"https://electronics.stackexchange.com/questions/86110/blinking-led-with-atmega8-wont-blink\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://electronics.stackexchange.com/questions/86110/blinking-led-with-atmega8-wont-blink</a></li>\n</ul>\n<h2 id=\"further-reading\" style=\"position:relative;\">Further reading<a href=\"#further-reading\" aria-label=\"further reading permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li>I found <a href=\"https://desertbot.io/blog/page/2\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">this blog</a></li>\n<li>and another <a href=\"https://blog.podkalicki.com/how-to-compile-and-burn-the-code-to-avr-chip-on-linuxmacosxwindows/\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://blog.podkalicki.com/how-to-compile-and-burn-the-code-to-avr-chip-on-linuxmacosxwindows/</a></li>\n<li>one more <a href=\"https://denilson.sa.nom.br/blog/2008-02-02/first-contact-with-atmega8-microcontroller-part-4\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://denilson.sa.nom.br/blog/2008-02-02/first-contact-with-atmega8-microcontroller-part-4</a></li>\n<li>Fuses <a href=\"http://code.rancidbacon.com/LearningAboutArduinoATMega8\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">http://code.rancidbacon.com/LearningAboutArduinoATMega8</a></li>\n<li>Restore locked AVR <a href=\"https://www.avrfreaks.net/forum/tutsoft-recovering-locked-out-avr\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://www.avrfreaks.net/forum/tutsoft-recovering-locked-out-avr</a></li>\n<li>Lower frequency of communication (ATMega8 without external crystal works on 1MHz) <a href=\"https://www.avrfreaks.net/forum/problem-mega128-programming-using-avrdude-bsd\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://www.avrfreaks.net/forum/problem-mega128-programming-using-avrdude-bsd</a></li>\n<li>From RaspberryPi to Arduino - good, to ATMega - no. <a href=\"https://forums.raspberrypi.com/viewtopic.php?t=155532\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://forums.raspberrypi.com/viewtopic.php?t=155532</a></li>\n<li>Connect Reset pin to 5V ? Why? <a href=\"https://www.avrfreaks.net/forum/solved-how-check-avr-atmega8-16pu-work-correctly\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://www.avrfreaks.net/forum/solved-how-check-avr-atmega8-16pu-work-correctly</a></li>\n</ul>","excerpt":"This is the first step in my ambitious project to create a successful geek product. So I have two AVR chips: ATMega8l-8pu and ATMega8a-8pâ€¦","tableOfContents":"<ul>\n<li>\n<p><a href=\"#specs\">Specs</a></p>\n<ul>\n<li><a href=\"#notes\">Notes</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#from-raspberry-pi-to-the-chip\">From Raspberry Pi to the chip</a></p>\n<ul>\n<li><a href=\"#main-question\">Main question</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#avr-gcc\">avr-gcc</a></p>\n</li>\n<li>\n<p><a href=\"#connection\">Connection</a></p>\n</li>\n<li>\n<p><a href=\"#from-arduino-to-atmega8\">From Arduino to ATMega8</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n<li>\n<p><a href=\"#further-reading\">Further reading</a></p>\n</li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/3deede71-a768-5a37-9c0f-8b14844fde0f.jpg"},"frontmatter":{"date":"August 19, 2022","published":"August 20, 2022","lastModified":"September 01, 2022","title":"Arduino soul possession","subtitle":null,"section":null,"draft":null,"developing":true,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/arduino-soul-possession.md","url":"/make/arduino-soul-possession","next":{"excerpt":"Chip shortage updates for 2022! What I plan to buy Micro Gearmotor The list of online stores We are looking for a site that has a searchâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/where-to-buy-electronic-components-in-us.md","frontmatter":{"title":"Where to buy electronic components in US","date":"2022-08-21T00:00:00.000Z","topic":null,"article":null},"id":"8db13511-9eb1-50b2-9ca9-015c68ba79b9"},"previous":{"excerpt":"https://www.printables.com/model/61902-small-self-watering-seed-starter https://twitter.com/Cappuccino_Math/status/1556428829920563200 Iâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/start-gardening.md","frontmatter":{"title":"Start gardening","date":"2022-08-13T00:00:00.000Z","topic":null,"article":null},"id":"589b9ece-c70f-5e25-8604-bf3effeeb582"},"recentArticles":[{"excerpt":"Specs  Screen size: 135 x 240 (14.86 x 24.91 mm) Module size: 30.40 x 28 (mm) Colors: 65K Protocol: SPI IC: ST7789V datasheet VCC: 3.3Vâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/tft-display-module-st7789v.md","frontmatter":{"title":"1.14 Inch TFT Display Module","date":"2024-05-20T00:00:00.000Z","topic":null,"article":null},"id":"54f8d0fc-0527-52f3-9f3f-c8092b59aab8"},{"excerpt":"Specs 32-bit MCU (Xtensa LX7, up to 240 MHz) from Espressif ESP32-S2-WROOM. Datasheet, Technical Reference, official Development board, andâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/esp32-s2-wroom.md","frontmatter":{"title":"ESP32-S2-WROOM","date":"2024-05-10T00:00:00.000Z","topic":null,"article":null},"id":"71da55ca-5916-5ef5-a446-e0e0e33defae"},{"excerpt":"Not every Pi has Adreno GPU Orange Pi = Rockchip, therefore they have Mali GPU Raspberry Pi = VideoCore GPU Banana Pi (BPI-M4 Berryâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/list-of-single-board-computers.md","frontmatter":{"title":"List of Single Board Computers","date":"2024-05-10T00:00:00.000Z","topic":null,"article":null},"id":"3ea54fc7-f210-59b2-8949-e6eba9ea9270"},{"excerpt":"Operating Voltage: 5V DC Operating Current: 15mA Measure Angle: 15Â° Ranging Distance: 2cm - 4m Accuracy +-3mm Despite many chips on the backâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/distance-sensor.md","frontmatter":{"title":"Distance sensor","date":"2024-04-20T00:00:00.000Z","topic":null,"article":null},"id":"e7174c85-c2ae-58d4-b782-646165e04deb"},{"excerpt":"From a letter where a try to find a datasheet I represent <>, a company specializing in the upcycling of used electronics. We're currentlyâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/make/nand-memory.md","frontmatter":{"title":"NAND memory","date":"2023-12-27T00:00:00.000Z","topic":null,"article":null},"id":"d70fae59-0e49-5808-bc54-d61455e06c51"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}