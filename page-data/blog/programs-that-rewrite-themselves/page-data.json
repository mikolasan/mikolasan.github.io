{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/programs-that-rewrite-themselves","result":{"data":{"markdownRemark":{"html":"<h2 id=\"preface\" style=\"position:relative;\">Preface<a href=\"#preface\" aria-label=\"preface permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>In computer science thereâ€™s an interesting exercise when you need to make a program that prints itself. In similar manner what about programs that can change themselves?</p>\n<blockquote>\n<p>I would like to see a non-trivial self-referencing program. That is, a program that can change itself, but its main purpose is NOT doing that...</p>\n<p><a href=\"https://twitter.com/jrlgs/status/1568728524688687107\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Jorge Romero</a></p>\n</blockquote>\n<p>Researchers are talking about AI systems but we even havenâ€™t established practices to allow programs alter its code.</p>\n<p>I know that the first example that comes to mind is malware. Itâ€™s the malware that changes other programs and itself.</p>\n<blockquote>\n<p>I love Morphic, which is the GUI for smalltalk, but, all the companies loved the OOP in Smalltalk but couldn't do vendor-lockin, thats why c++ boomed, its compiled, no source code, opposed to Smalltalk. So, how can a program modify itself if the sourcecode isnt included ?</p>\n<p><a href=\"https://twitter.com/mohjb/status/1568763661195550720\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Mohamad Bo Hamad</a></p>\n</blockquote>\n<p>Smalltalk doesn't have source files ðŸ˜± it's compiled into bytecode, but it has reflection which allows to do magic at runtime.</p>\n<p>When we deal with machine code, then the field for change is narrow, but it's still possible. This is how all <em>cracks</em> (programs that crack other programs) work. The crack overrides a few instructions in the original program that were suppose to check for a license. Then with new instructions in place the flow is redirected to the successful output when the license is verified, but possibly the license was never even entered.</p>\n<blockquote>\n<p>Self-modifying code was a big proponent in older game copy protection and DRMs. These were super non-trivial and a right mess.</p>\n<p><a href=\"https://twitter.com/RubyNovaDev/status/1568762754533564417\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">Matt Jones</a></p>\n</blockquote>\n<p>Iâ€™d like to defend rights of amok programs. They should be allowed to run at least in containers. Like a zoo of peculiar apps.</p>\n<p>Not sure how good the advice is, but in order to achieve high level of security, then use algorithms that are less known. For xample instead of LZMA, bzip or XZ use brotli or zopfli. If you add custom compression algorithm to the kernel then no one will have a clue how to unpack your ramfs.</p>\n<h2 id=\"dynamic-modules\" style=\"position:relative;\">Dynamic modules<a href=\"#dynamic-modules\" aria-label=\"dynamic modules permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>But let's return back to programs that can modify its code at runtime. First, we start with simple examples where we illustrate that pointers refer to memory and in that memory specific functions are located. Once the pointer changes it value, then it refers to another memory location that can contain another function.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token comment\">// define two different algorithms as functions</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">algorithm1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Using algorithm 1 with input \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">algorithm2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Using algorithm 2 with input \"</span> <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> input <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>funcPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// declare a function pointer variable</span>\n\n  <span class=\"token comment\">// set the function pointer to point to algorithm1</span>\n  funcPtr <span class=\"token operator\">=</span> algorithm1<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">funcPtr</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// call algorithm1 with the input</span>\n\n  <span class=\"token comment\">// set the function pointer to point to algorithm2</span>\n  funcPtr <span class=\"token operator\">=</span> algorithm2<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">funcPtr</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// call algorithm2 with the input</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Such technique is very simple, in more advanced applications one can use the strategy pattern or other design patterns and achieve similar behavior when algorithms are selected at runtime. Such algorithms can be loaded as dynamic modules, which means that they can be compiled later when the main program is already working. Of course it's not the full solution because the main program doesn't control what is contained in such dynamics modules.</p>\n<h2 id=\"interpreted-languages\" style=\"position:relative;\">Interpreted languages<a href=\"#interpreted-languages\" aria-label=\"interpreted languages permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>To eliminate complexity with compilation of the new modules I think we could use interpreting programming language.</p>\n<p>From C++ we can create files, and write code, let's say in Python, then load these new files into the interpreter and fetch results in the main C++ program.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// define the rules for determining what Python code to write</span>\n  <span class=\"token keyword\">bool</span> useAlgorithm1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// for example purposes only, this can be changed based on your desired rules</span>\n\n  <span class=\"token comment\">// create a new Python file and write code to it based on the rules</span>\n  std<span class=\"token double-colon punctuation\">::</span>ofstream <span class=\"token function\">pythonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"algorithm.py\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useAlgorithm1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pythonFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"def algorithm(x):\\n  return x * 2\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    pythonFile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"def algorithm(x):\\n  return x * 3\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  pythonFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// execute the Python interpreter and run the Python code</span>\n  std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python algorithm.py > output.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// read the results from the output file and use them in the C++ program</span>\n  std<span class=\"token double-colon punctuation\">::</span>ifstream <span class=\"token function\">outputFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> result<span class=\"token punctuation\">;</span>\n  outputFile <span class=\"token operator\">>></span> result<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The result is: \"</span> <span class=\"token operator\">&lt;&lt;</span> result <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  outputFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Is there a framework that can help me convert from sentences in natural language into functions written in programming language? Let's take a look on <strong>NLTK</strong> example.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> nltk\n\n<span class=\"token comment\"># Define the sentence we want to convert</span>\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"Add two numbers together\"</span>\n\n<span class=\"token comment\"># Define the grammar for the sentence</span>\ngrammar <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>CFG<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n    S -> VP\n    VP -> V NP NP\n    NP -> CD N\n    V -> \"Add\"\n    CD -> \"two\"\n    N -> \"numbers\"\n\"\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Define a function that generates code from a parse tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_code</span><span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"S\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VP\"</span><span class=\"token punctuation\">:</span>\n        operator <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        operand1 <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        operand2 <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operand1<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operator<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operand2<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"+\"</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"CD\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"2\"</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"number\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Use the grammar to parse the sentence</span>\nparser <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>ChartParser<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">)</span>\ntrees <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_all<span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Generate code from the parse tree</span>\n<span class=\"token keyword\">for</span> tree <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">:</span>\n    operands <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        operand <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter a number: \"</span><span class=\"token punctuation\">)</span>\n        operands<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>operand<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>\n      generate_code<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">:</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>operands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The result is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>How to design the main module that will decide what Python code to write?</p>\n<ol>\n<li>Define the grammar for the input sentences using a context-free grammar</li>\n<li>Write a function that takes a parse tree of the input sentence and generates Python code from it.</li>\n<li>Use NLTK's chart parser to parse the user input into a parse tree using the defined grammar.</li>\n<li>If there are multiple valid parse trees, use a disambiguation method to select the most appropriate one.</li>\n<li>Use the generated Python code to perform the desired actions.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> nltk\n\n<span class=\"token comment\"># Define the grammar for arithmetic expressions</span>\ngrammar <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>CFG<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n    S -> NP VP\n    NP -> \"Please\" \"calculate\" \"the\" \"result\" \"of\" NP1\n    NP1 -> \"adding\" \"two\" \"numbers\" | \"subtracting\" \"two\" \"numbers\" | \"multiplying\" \"two\" \"numbers\" | \"dividing\" \"two\" \"numbers\"\n    VP -> V NP NP\n    V -> \"add\" | \"subtract\" | \"multiply\" | \"divide\"\n\"\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Define a function that generates Python code from a parse tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_code</span><span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VP\"</span><span class=\"token punctuation\">:</span>\n        operator <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        operand1 <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        operand2 <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operand1<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operator<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operand2<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"subtract\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"multiply\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Define a function that performs the desired action based on the generated code</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">perform_action</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The result is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"An error occurred: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Use the grammar to parse the user input</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">parse_input</span><span class=\"token punctuation\">(</span>input_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>ChartParser<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">)</span>\n    trees <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_all<span class=\"token punctuation\">(</span>input_str<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> trees\n\n<span class=\"token comment\"># Disambiguate the parse trees and generate Python code from the selected tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">process_input</span><span class=\"token punctuation\">(</span>input_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    trees <span class=\"token operator\">=</span> parse_input<span class=\"token punctuation\">(</span>input_str<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> trees<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>trees<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ambiguous input. Selecting the first parse tree.\"</span><span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> trees<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    code <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n    perform_action<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Prompt the user for input and process it</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    input_str <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter an arithmetic expression, or 'quit' to exit: \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> input_str <span class=\"token operator\">==</span> <span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    process_input<span class=\"token punctuation\">(</span>input_str<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> nltk\n\n<span class=\"token comment\"># Define the grammar for expressions</span>\ngrammar <span class=\"token operator\">=</span> nltk<span class=\"token punctuation\">.</span>CFG<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"\n    S -> NP VP\n    NP -> \"Please\" \"calculate\" \"the\" \"result\" \"of\" NP1\n    NP1 -> \"adding\" \"two\" \"numbers\" | \"subtracting\" \"two\" \"numbers\" | \"multiplying\" \"two\" \"numbers\" | \"dividing\" \"two\" \"numbers\" | \"evaluating\" \"the\" \"expression\"\n    VP -> V NP NP | \"assign\" NP \"to\" VAR | \"call\" FUNC NP | \"if\" COND \"then\" STMT | \"if\" COND \"then\" STMT \"else\" STMT | \"while\" COND \"do\" STMT\n    V -> \"add\" | \"subtract\" | \"multiply\" | \"divide\"\n    VAR -> \"x\" | \"y\" | \"z\"\n    FUNC -> \"sqrt\" | \"sin\" | \"cos\"\n    COND -> \"true\" | \"false\" | NP OP NP\n    OP -> \"less than\" | \"greater than\" | \"equal to\"\n    STMT -> VP | \"print\" NP | \"exit\"\n\"\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Define a function that generates Python code from a parse tree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_code</span><span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VP\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">:</span>\n            operator <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            operand1 <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            operand2 <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operand1<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operator<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>operand2<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VAR\"</span><span class=\"token punctuation\">:</span>\n            variable <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            value <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>variable<span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"FUNC\"</span><span class=\"token punctuation\">:</span>\n            function <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            argument <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>function<span class=\"token punctuation\">}</span></span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>argument<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span>\n        <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"COND\"</span><span class=\"token punctuation\">:</span>\n            condition <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            then_clause <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            else_clause <span class=\"token operator\">=</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">if</span> else_clause <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>then_clause<span class=\"token punctuation\">}</span></span><span class=\"token string\"> if </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>condition<span class=\"token punctuation\">}</span></span><span class=\"token string\"> else </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>else_clause<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>then_clause<span class=\"token punctuation\">}</span></span><span class=\"token string\"> if </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>condition<span class=\"token punctuation\">}</span></span><span class=\"token string\"> else None\"</span></span>\n        <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"STMT\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> generate_code<span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"subtract\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"multiply\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"VAR\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"FUNC\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">elif</span> parse_tree<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"COND\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>parse_tree<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"True\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"False\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            operator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"less than\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"greater than\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"equal to\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"==\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>parse_tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>Let's say our program is a social media bot. We define states as a combination of several metrics: count of posts, amount of followers, unread DMs, comments to our posts. Also we can make these actions: \"create a post\", \"write a comment\", \"add like\", \"reply to comment\", \"write a DM\", \"follow a user\", \"block user\". The reward function is based on how many likes we received and how many followers increased</p>\n<p>Additional factors that could be included in the MDP to make the decision-making more accurate and effective include:</p>\n<ul>\n<li>Time of day: Posting or interacting with users at certain times of day may be more effective than at other times. For example, if your bot is targeting users in a specific time zone, posting during peak activity hours may result in more engagement.</li>\n<li>User engagement: Your bot can track how engaged users are with your posts or interactions, such as likes, comments, and shares. The bot can use this data to decide which type of content or interaction to prioritize.</li>\n<li>User preferences: If your bot has data on users' preferences, such as topics they are interested in or content they engage with the most, the bot can use this information to personalize its actions and increase engagement.</li>\n<li>User sentiment: Your bot can analyze user sentiment, such as positive or negative feedback, to adjust its actions accordingly. For example, if a user has recently left a negative comment, the bot may avoid interacting with that user for a certain period of time.</li>\n<li>Competitor analysis: Your bot can monitor competitors' actions and engagement rates to adjust its own actions and remain competitive in the social media space.</li>\n</ul>\n<h2 id=\"change-c-code\" style=\"position:relative;\">Change C++ code<a href=\"#change-c-code\" aria-label=\"change c code permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li>Is it possible to compile code right in the program using gcc, for example? <a href=\"https://softwareengineering.stackexchange.com/questions/189949/is-there-a-way-to-use-gcc-as-a-library\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">The answer is</a>: use clang</li>\n<li></li>\n</ul>\n<h2 id=\"next\" style=\"position:relative;\">Next<a href=\"#next\" aria-label=\"next permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<p>Can I create new programming language that will be similar to human neural system in the way that will allow to execute operations in parallel?</p>\n<h2 id=\"links\" style=\"position:relative;\">Links<a href=\"#links\" aria-label=\"links permalink\" class=\"with-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\">\n                <path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3\n                3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3\n                  9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64\n                  1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\">\n                </path>\n                </svg></a></h2>\n<ul>\n<li><a href=\"https://book.hacktricks.xyz/crypto-and-stego/cryptographic-algorithms#serpent-symmetric-crypt\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://book.hacktricks.xyz/crypto-and-stego/cryptographic-algorithms#serpent-symmetric-crypt</a></li>\n<li>Address space layout randomization (ASLR) <a href=\"https://www.mandiant.com/resources/blog/six-facts-about-address-space-layout-randomization-on-windows\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\">https://www.mandiant.com/resources/blog/six-facts-about-address-space-layout-randomization-on-windows</a></li>\n</ul>","excerpt":"Preface In computer science thereâ€™s an interesting exercise when you need to make a program that prints itself. In similar manner what aboutâ€¦","tableOfContents":"<ul>\n<li><a href=\"#preface\">Preface</a></li>\n<li><a href=\"#dynamic-modules\">Dynamic modules</a></li>\n<li><a href=\"#interpreted-languages\">Interpreted languages</a></li>\n<li><a href=\"#change-c-code\">Change C++ code</a></li>\n<li><a href=\"#next\">Next</a></li>\n<li><a href=\"#links\">Links</a></li>\n</ul>","fields":{"socialcard":"gatsby-plugin-social-card/b9602b28-c2ab-5efc-9dfb-d38b6121f8ad.jpg"},"frontmatter":{"date":"September 08, 2022","published":"September 16, 2022","lastModified":"September 16, 2022","title":"Programs that rewrite themselves","subtitle":null,"section":null,"draft":null,"developing":null,"buttonText":null,"buttonLink":null,"secondButtonText":null,"secondButtonLink":null,"featuredImage":null}}},"pageContext":{"showLikes":true,"absolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/programs-that-rewrite-themselves.md","url":"/blog/programs-that-rewrite-themselves","next":{"excerpt":"After part 1 I want to add some more rules about time management. Unknown language or unknown framework takes 5 times longer, then somethingâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/time-management-part-2.md","frontmatter":{"title":"Time management: part 2","date":"2022-09-18T00:00:00.000Z","topic":null,"article":null},"id":"faa5cf26-f463-5a2e-ba25-dd7835f2f26a"},"previous":{"excerpt":"I'm having a depression and I've been working on my website this weekend ðŸ˜‘ I post different stuff, but it definitely lacks interconnectionsâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/graph-of-inbound-links.md","frontmatter":{"title":"Graph of inbound links","date":"2022-07-31T00:00:00.000Z","topic":null,"article":null},"id":"315232ae-47f3-52ec-9429-61055252f092"},"recentArticles":[{"excerpt":"To read AI hype is over? (post from 2023) - Lâ€™IA nâ€™est-elle quâ€™un mythe qui sâ€™essoufflera ? About Google alternative services -  Comment jâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/learning-french.md","frontmatter":{"title":"How I am learning French","date":"2025-07-12T00:00:00.000Z","topic":null,"article":null},"id":"de46ffde-c202-594f-b222-f5f4a548fbe4"},{"excerpt":"I think I like having a dialogue with someone who knows about the topic, even with students who just obtained knowledge from canonicalâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/lizards-and-continuous-space.md","frontmatter":{"title":"Lizards and Continuous space","date":"2025-06-23T00:00:00.000Z","topic":null,"article":null},"id":"6ee1f95a-2c05-5950-8a0d-20ff4d937fb1"},{"excerpt":"Yes, developers add new features, refactor other parts to get rid of technical debt. This often changes API, which usually triggersâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/new-ui-and-conspiracy-in-it-industry.md","frontmatter":{"title":"New UI","date":"2025-06-21T00:00:00.000Z","topic":null,"article":null},"id":"fe2e710c-0afa-5b11-8a7d-1dc46d02f0f9"},{"excerpt":"Now when I almost finished with the titanic competition (I didnâ€™t reach 90% accuracy as I planned, although I doubt itâ€™s possible), itâ€™sâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/regulus.md","frontmatter":{"title":"Regulus","date":"2025-05-13T00:00:00.000Z","topic":null,"article":null},"id":"cf23a6fc-e0e2-571b-9dbf-5030b3af25dd"},{"excerpt":"When I found out there was a popular platform where people share open source projects, I imagined GitHub differently. I thought I could findâ€¦","fileAbsolutePath":"/home/runner/work/mikolasan.github.io/mikolasan.github.io/src/markdown/blog/how-github-should-work.md","frontmatter":{"title":"How GitHub should work","date":"2025-04-03T00:00:00.000Z","topic":null,"article":null},"id":"63562cc8-f132-5cbc-a444-5639c4a78d98"}]}},"staticQueryHashes":["2961657013","447685113"],"slicesMap":{}}