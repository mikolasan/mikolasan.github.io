{"version":3,"file":"component---src-pages-slots-the-last-samurai-js-7ceb6defd4322270e671.js","mappings":"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","sources":["webpack://gatsby-mikolasan-blog/./src/components/layoutBase.js","webpack://gatsby-mikolasan-blog/./src/components/layout.js","webpack://gatsby-mikolasan-blog/./src/components/slots/interface.js","webpack://gatsby-mikolasan-blog/./src/components/slots/samurai-reels.js","webpack://gatsby-mikolasan-blog/./src/pages/slots/the-last-samurai.js","webpack://gatsby-mikolasan-blog/./src/components/slots/index.module.css"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { getImage, getSrc } from \"gatsby-plugin-image\"\n\nimport Banner from \"../components/banner\"\nimport FeaturedImage from \"../components/featuredImage\"\nimport MainBase from \"./mainBase\"\nimport MenuPopup from \"./menuPopup\"\nimport Footer from \"./footerBase\"\nimport Header from \"./header\"\nimport Search from \"./allPagesSearch\"\n\nclass LayoutBase extends React.Component {\n  constructor(props) {\n    super(props)\n    this.errorCallback = this.errorCallback.bind(this)\n    this.menuClicked = this.menuClicked.bind(this)\n    this.closeCallback = this.closeMenu.bind(this)\n    this.searchClicked = this.searchClicked.bind(this)\n    this.state = {\n      menuOpen: false,\n      searchOpen: false,\n      errorMessage: \"\"\n    }\n  }\n\n  errorCallback(errorMessage) {\n    this.setState({\n      errorMessage: errorMessage\n    })\n  }\n  \n  menuClicked() {\n    this.setState({\n      menuOpen: !this.state.menuOpen,\n      searchOpen: false\n    })\n  }\n\n  openMenu() {\n    this.setState({ menuOpen: true })\n  }\n\n  closeMenu() {\n    this.setState({ menuOpen: false })\n  }\n\n  searchClicked() {\n    if (this.state.menuOpen) return\n\n    this.setState({ searchOpen: !this.state.searchOpen})\n  }\n\n  render() {\n    const {\n      children,\n      title,\n      published,\n      publishedText,\n      lastUpdated,\n      updatedText,\n      section,\n      subsection,\n      buttonText,\n      buttonLink,\n      secondButtonText,\n      secondButtonLink,\n      featuredImage,\n      bannerParagraph,\n      mainConf,\n      languageName\n    } = this.props\n    \n    const imageData = getImage(featuredImage);\n    const imageSrc = getSrc(featuredImage);\n\n    const wideImage = (\n      <FeaturedImage\n        image={imageData}\n        title={title}\n        buttonText={buttonText}\n        buttonLink={buttonLink}\n        secondButtonText={secondButtonText}\n        secondButtonLink={secondButtonLink}\n        published={published}\n        lastUpdated={lastUpdated}\n      >\n        {bannerParagraph}\n      </FeaturedImage>\n    )\n\n    const banner = bannerParagraph && (\n      <Banner\n        buttonText={buttonText}\n        buttonLink={buttonLink}\n        secondButtonText={secondButtonText}\n        secondButtonLink={secondButtonLink}\n        published={published}\n        publishedText={publishedText}\n        lastUpdated={lastUpdated}\n        updatedText={updatedText}\n      >\n        {bannerParagraph}\n      </Banner>\n    ) || ``\n\n    const header = (\n      <Header\n        section={section}\n        subsection={subsection}\n        language={languageName}\n        menuOpen={this.state.menuOpen}\n        menuClickedCallback={this.menuClicked}\n        searchOpen={this.state.searchOpen}\n        searchClickedCallback={this.searchClicked}\n      />\n    )\n\n    const fullscreenMenu = (\n      <>\n        {header}\n        <MenuPopup\n          language={languageName}\n          closeCallback={this.closeCallback}\n        />\n      </>\n    )\n\n    const fullPage = (\n      <div className={\"language-\" + languageName}>\n        {header}\n        {this.state.searchOpen && (\n          <div className=\"searchline\">\n            <Search />\n          </div>\n        )}\n        {featuredImage && wideImage || banner}\n        <MainBase\n          mainConf={mainConf}\n          errorCallback={this.errorCallback}\n          errorMessage={this.state.errorMessage}\n          {...this.props}\n        >\n          {children}\n        </MainBase>\n        <Footer language={languageName} />\n      </div>\n    )\n\n    const isMenuOpen = this.state.menuOpen\n    const currentLayout = isMenuOpen && fullscreenMenu || fullPage\n    return currentLayout\n  }\n}\n\nLayoutBase.propTypes = {\n  children: PropTypes.node.isRequired,\n  languageName: PropTypes.string.isRequired,\n  publishedText: PropTypes.string.isRequired,\n  updatedText: PropTypes.string.isRequired,\n}\n\nexport default LayoutBase\n","import React from \"react\"\nimport LayoutBase from \"./layoutBase\"\nimport LayoutNavigation from \"./layoutNavigation\"\n\nexport default function Layout(props) {\n  switch (props.mainConf) {\n  case \"navigation\":\n    return (\n      <LayoutNavigation\n        {...props}\n        languageName=\"en\"\n        publishedText=\"Published: \"\n        updatedText=\"Updated: \"\n      />\n    )\n  default:\n    return (\n      <LayoutBase\n        {...props}\n        languageName=\"en\"\n        publishedText=\"Published: \"\n        updatedText=\"Updated: \"\n      />\n    )\n  }\n}","\nlet balance = 1000;\nconst max_bet_per_line = 20;\nlet bet_per_line = 10;\nconst n_lines = 10;\nlet total_bet = bet_per_line * n_lines;\nlet win = 0;\n\nfunction init_interface() {\n  update_all_labels();\n}\n\nfunction on_bet_plus_clicked() {\n  bet_per_line += 1;\n  if (bet_per_line > max_bet_per_line) {\n    bet_per_line = max_bet_per_line;\n  }\n  total_bet = bet_per_line * n_lines;\n  update_bet_label();\n  update_total_bet_label();\n}\n\nfunction on_bet_minus_clicked() {\n  bet_per_line -= 1;\n  if (bet_per_line < 1) {\n    bet_per_line = 1;\n  }\n  total_bet = bet_per_line * n_lines;\n  update_bet_label();\n  update_total_bet_label();\n}\n\nfunction on_spin_started() {\n  balance -= total_bet;\n  win = 0;\n  update_win_label()\n  update_balance_label();\n}\n\nfunction on_winning_result(total_win, text_result) {\n  win = total_win * bet_per_line;\n  balance += win;\n  update_win_label();\n  update_balance_label();\n  update_result_label(text_result);\n}\n\nfunction update_balance_label() {\n  const element = document.getElementById('balance');\n  if (!element) return;\n  element.innerHTML = `Balance: ${balance}`;\n}\n\nfunction update_bet_label() {\n  const element = document.getElementById('bet_per_line');\n  if (!element) return;\n  element.innerHTML = `Bet per line: ${bet_per_line}`;\n}\n\nfunction update_total_bet_label() {\n  const element = document.getElementById('total_bet');\n  if (!element) return;\n  element.innerHTML = `Total bet: ${total_bet}`;\n}\n\nfunction update_win_label() {\n  const element = document.getElementById('win');\n  if (!element) return;\n  element.innerHTML = text_result;\n}\n\nfunction update_result_label(text_result) {\n  const element = document.getElementById('slot-machine-result');\n  if (!element) return;\n  element.innerHTML = text_result;\n}\n\nfunction update_all_labels() {\n  update_balance_label();\n  update_bet_label();\n  update_total_bet_label();\n  update_win_label();\n}\n\nexport { init_interface, on_spin_started, on_winning_result };","// TODO:\n// - add shader effect to the background https://www.shadertoy.com/view/wstSRM\n\nimport { on_spin_started, on_winning_result } from \"./interface\"\n\nconst slot_width = 128;\nconst slot_height = 128;\n\nconst n_reels = 5;\nconst n_rows = 3;\nconst invisible_rows = 1; // add these rows to the top and bottom of the reels\nconst shift_x = 110;\nconst shift_y = 50;\nconst reel_gap = 7;\n// const width = slot_width * n_reels + reel_gap * (n_reels - 1) + shift_x * 2;\n// const height = slot_height * n_rows + shift_y * 2;\nconst maxWidth = 900;\nconst maxHeight = 550;\nlet width;\nlet height;\n\n\nconst BS = 'BS';\nconst CH = 'CH';\nconst CR = 'CR';\nconst JD = 'JD';\nconst LA = 'LA';\nconst NJ = 'NJ';\nconst PA = 'PA';\nconst RI = 'RI';\nconst SM = 'SM';\nconst SU = 'SU';\nconst TR = 'TR';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#getting_a_random_integer_between_two_values_inclusive\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction shuffle(array) {\n  let {length} = array;\n  while (length--) {\n    const i = getRandomIntInclusive(0, length);\n    [array[i], array[length]] = [array[length], array[i]];\n  }\n  return array;\n}\n\nconst choose_5 = [BS, CH, CR, JD, LA, NJ, PA, RI, SM, SU, TR];\nconst strips = [\n  [RI, RI, BS, CH, CR, JD, LA, NJ, PA, RI, RI, SM, SU, RI, RI, TR, TR, TR, TR],\n  [SM, TR, RI, RI, JD, JD, CR, RI, PA, NJ, JD, JD, JD, JD, SU, LA, JD, JD, CH, BS ],\n  [SM, PA, PA, BS, RI, RI, LA, JD, JD, JD, JD, PA, PA, CH, NJ, PA, PA, RI, TR, JD, JD, SU, CR, PA, PA ],\n  [CR, JD, JD, SU, PA, RI, RI, RI, BS, JD, JD, JD, JD, CH, LA, SM, JD, JD, NJ ],\n  [CR, RI, TR, JD, JD, JD, RI, RI, SM, BS, RI, RI, SU, LA, JD, JD, NJ, CH ],\n]\n\n// 0 3 6 9  12\n// 1 4 7 10 13\n// 2 5 8 11 14\nconst lines = [\n  [1,4,7,10,13],\n  // [0,4,8,10,12],\n  // [2,4,6,10,14]\n];\n\nconst spin_button = {\n  x: 396,\n  y: 427,\n  a: 53,\n  b: 52,\n  enabled: true,\n  clicked: false,\n  mouse: 'out',\n}\n\nlet slot_images = new Map();\n\nconst y = 0;\n\nconst reels = [];\nreels.length = n_reels;\nconst reel_speed = 1;\nconst reel_positions = [];\nreel_positions.length = n_reels;\nconst reel_position_offsets = [];\nreel_position_offsets.length = n_reels;\nconst start_position = 0;\nconst start_offset = invisible_rows * slot_height;\nconst slots_per_spin = 5; // must be >= n_rows\nconst total_distance = (slots_per_spin + invisible_rows) * slot_height;\nlet t_spinning = 0;\nlet t_stopping = 0;\nconst fps = 60.0;\n// dt = 1/60 = 0.016 sec = 16 ms\nconst spin_duration = 1500; // msec\nlet k = 0;\nconst n_draw_calls = (spin_duration / 1000) * fps;\nconst accumulated_t = (n_draw_calls / 2) * (n_draw_calls - 1) * (1 / fps); // =  n_draw_calls - 1\n//const k = 0.005;\nlet showtime = 0\n// accumulated_t = max_t\n// dt = k\n// k = max_t * dt / accumulated_t\n\nconst n_slots_spinned = [];\nn_slots_spinned.length = n_reels;\nlet n_reels_stopped = 0;\nlet t = 0;\nlet max_t = 0;\nlet result = null;\n\n// my beautiful state machine\nconst state_idle = {\n  on_enter: function() {\n    \n  },\n  on_leave: function() {\n\n  }\n};\n\nfunction move_func_inv(x) {\n  return Math.sqrt(2 * x);\n}\n\nconst state_spinning = {\n  on_enter: function() {\n    reel_positions.fill(start_position);\n    reel_position_offsets.fill(start_offset);\n    t = 0;\n    max_t = move_func_inv(total_distance);\n    t_spinning = max_t;\n    t_stopping = t_spinning * 2;\n    k = (max_t / accumulated_t) * (1 / fps) ;\n    //console.log(\"max_t\", max_t, k, t_spinning, t_stopping);\n    n_slots_spinned.fill(0);\n    n_reels_stopped = 0;\n    const symbols = random_result_symbols();\n    console.log(\"result symbols\", symbols);\n    set_result_symbols(symbols);\n    on_spin_started();\n  },\n  on_leave: function(next_state) {\n\n  }\n};\n\nconst state_stopping = {\n  on_enter: function() {\n\n  },\n  on_leave: function(next_state) {\n\n  }\n};\n\nconst state_winning = {\n  on_enter: function() {\n    showtime = 0;\n    this.current_animating_line = 0;\n  },\n  on_leave: function() {\n\n  },\n  win: 0,\n  animating_slots: [],\n  //current_animating_line: 0\n};\n\nlet current_state = state_idle;\n\nfunction switch_state(s1, s2) {\n  s1.on_leave(s2);\n  current_state = s2;\n  s2.on_enter();\n}\n\nfunction random_virtual_stop(reel_id) {\n  const strip = strips[reel_id];\n  return Math.floor(Math.random() * strip.length);\n}\n\nfunction get_strip_symbol(reel_id, offset) {\n  const strip = strips[reel_id];\n  return strip[offset % strip.length];\n}\n\nfunction random_result_symbols() {\n  const symbols = [];\n  for (let reel_id = 0; reel_id < n_reels; ++reel_id) {\n    const virtual_stop = random_virtual_stop(reel_id);\n    for (let slot_id = 0; slot_id < n_rows; ++slot_id) {\n      symbols[reel_id * n_rows + slot_id] = get_strip_symbol(reel_id, virtual_stop + slot_id);\n    }\n  }\n  return symbols;\n}\n\nfunction set_result_symbols(symbols) {\n  result = symbols;\n}\n\nfunction random_symbol(reel_id) {\n  return get_strip_symbol(reel_id, random_virtual_stop(reel_id));\n}\n\nfunction get_slot_image(symbol_id) {\n  return slot_images.get(symbol_id)[1];\n}\n\nfunction random_slot_image(reel_id) {\n  return get_slot_image(random_symbol(reel_id));\n}\n\nfunction init_reel(reel_id) {\n  reels[reel_id] = [];\n  // add invisible rows to the top and bottom of each reel\n  for (let i = 0; i < n_rows + 2 * invisible_rows; ++i) {\n    reels[reel_id].push(random_slot_image(reel_id));\n  }\n}\n\nfunction force_stop() {\n  for (let reel_id = 0; reel_id < n_reels; ++reel_id) {\n    reel_positions[reel_id] = start_position;\n    reel_position_offsets[reel_id] = start_offset;\n    for (let slot_id = 0; slot_id < n_rows; ++slot_id) {\n      const id = reel_id * n_rows + slot_id;\n      reels[reel_id][slot_id + 1] = get_slot_image(result[id]);\n    }\n  }\n  on_reels_stopped();\n}\n\n\nfunction on_reel_stopped() {\n  n_reels_stopped += 1;\n  if (n_reels_stopped === n_reels) {\n    on_reels_stopped();\n  }\n}\n\nfunction on_reels_stopped() {\n  const {win, animating_slots, text_result} = parse_result();\n  if (animating_slots.length > 0) {\n    switch_state(current_state, state_winning);\n    state_winning.win = win;\n    state_winning.animating_slots = animating_slots;\n    on_winning_result(win, text_result);\n  } else {\n    switch_state(current_state, state_idle);\n    on_winning_result(0, \"Nothing\");\n  }\n}\n\nfunction parse_line(line_id) {\n  const l = lines[line_id];\n  const first = result[l[0]];\n  let x_times = 1;\n  let slots = [l[0]];\n  for (let reel_id = 1; reel_id < n_reels; ++reel_id) {\n    const symbol = result[l[reel_id]];\n    if (first == symbol) {\n      x_times += 1;\n      slots.push(l[reel_id]);\n    } else {\n      break;\n    }\n  }\n  const win = 0;\n  if (win == 0) slots = undefined;\n  return {line_win: win, slots: slots};\n}\n\nfunction parse_result() {\n  const win = 0;\n  const text_result = ''\n  return {win: win, animating_slots: lines, text_result: text_result};\n}\n\nfunction generate_next_symbol(reel_id) {\n  reels[reel_id].pop();\n  //console.log(n_slots_spinned[reel_id]  > 2 * slots_per_spin + 1 - n_rows, n_slots_spinned[reel_id], slots_per_spin, n_rows);\n  if (n_slots_spinned[reel_id] > 2 * slots_per_spin + 1 - n_rows && 2 * slots_per_spin - n_slots_spinned[reel_id]  + 1 >= 0) {\n    const i = 2 * slots_per_spin - n_slots_spinned[reel_id]  + 1; // n_rows - (n_slots_spinned[reel_id] - (2 * slots_per_spin + 1 - n_rows));\n    const slot_image = get_slot_image(result[reel_id * n_rows + i]);\n    //console.log(\"take result image\", reel_id, i, result[reel_id * n_rows + i]);\n    reels[reel_id].unshift(slot_image);\n  } else {\n    //console.log(\"pick random image\", reel_id);\n    const slot_image = random_slot_image(reel_id);\n    reels[reel_id].unshift(slot_image);\n  }\n}\n\nlet t1 = 0;\n\nfunction move_func(x) {\n  return Math.pow(x, 2) / 2;\n}\n\nfunction move_reel(reel_id, dt, next_symbol_callback) {\n  if (current_state === state_idle) return;\n  if (current_state === state_winning) return;\n  t += dt * k;\n  if (t > t_stopping && n_slots_spinned[reel_id] == 12) {\n    //console.log(\"move_reel stop->idle\", reel_id, t, t_stopping, n_slots_spinned[reel_id], reel_positions[reel_id]);\n    on_reel_stopped();\n    return;\n  } else if (current_state === state_spinning && t > t_spinning) {\n    switch_state(current_state, state_stopping);\n  }\n\n  if (current_state === state_spinning) {\n    t1 = t;\n    reel_positions[reel_id] = move_func(t);\n    if (reel_positions[reel_id] - reel_position_offsets[reel_id] >= slot_height - start_offset) {\n      n_slots_spinned[reel_id] += 1;\n      next_symbol_callback(reel_id);\n      reel_position_offsets[reel_id] += slot_height;\n    }\n  } else if (current_state === state_stopping) {\n    if (t > t_stopping) {\n      reel_positions[reel_id] += 1;\n      if (reel_positions[reel_id] > reel_position_offsets[reel_id]) {\n        reel_positions[reel_id] = reel_position_offsets[reel_id];\n      }\n    } else {\n      reel_positions[reel_id] = -move_func(t - 2 * t1) + 2 * move_func(t1);\n    }\n    if (reel_positions[reel_id] - reel_position_offsets[reel_id] >= slot_height - start_offset) {\n      n_slots_spinned[reel_id] += 1;\n      next_symbol_callback(reel_id);\n      reel_position_offsets[reel_id] += slot_height;\n    }\n  }\n}\n\nfunction get_reel_draw_coords(reel_id, slot_id) {\n  const x = reel_id * slot_width;\n  const y = (slot_id) * slot_height + reel_positions[reel_id] - reel_position_offsets[reel_id];\n  return {x: x, y: y};\n}\n\nconst one_line_delay = 1000;\nconst spin_highlight_delay = 2500;\nconst spin_highlight = 500;\nlet highlight_time = 0;\n\nfunction show_result(ctx, dt) {\n  showtime += dt;\n  if (Math.floor(showtime / one_line_delay) > state_winning.current_animating_line) {\n    state_winning.current_animating_line += 1;\n    if (state_winning.current_animating_line > state_winning.animating_slots.length) {\n      state_winning.current_animating_line = 0;\n      showtime = 0;\n    }\n  }\n\n  const line = state_winning.current_animating_line;\n  if (line === state_winning.animating_slots.length) {\n    // pause between cycles\n    return;\n  }\n\n  const slots = state_winning.animating_slots[line];\n  ctx.save();\n\n  ctx.strokeStyle = 'rgb(0, 0, 0)';\n  ctx.lineWidth = 6;\n  for (const slot of slots) {\n    const x = Math.floor(slot / n_rows);\n    const y = slot % n_rows;\n    ctx.strokeRect(shift_x + x * slot_width + reel_gap * x, shift_y + y * slot_height, slot_width, slot_height);\n    //ctx.drawImage(frame, x * slot_width, y * slot_height);\n  }\n  ctx.restore();\n}\n\nlet background = null;\nlet last_timestamp = 0;\n\nfunction draw(ctx, timestamp) {\n  const dt = timestamp - last_timestamp;\n  last_timestamp = timestamp;\n  \n  ctx.fillStyle = '#BDC2BF'; // background color\n  ctx.fillRect(0, 0, width, height);\n\n  \n  ctx.save();\n  const scale = width / maxWidth;\n  ctx.scale(scale, scale);\n  ctx.drawImage(background, 0, 0);\n\n  ctx.save();\n  // clipping rect\n  ctx.beginPath();\n  ctx.rect(shift_x, shift_y, slot_width * n_reels + reel_gap * (n_reels - 1), slot_height * n_rows);\n  ctx.clip();\n\n  // ctx.font = '30px sans-serif';\n  // ctx.fillStyle = '#000';\n  for (let reel_id = 0; reel_id < n_reels; ++reel_id) {\n    // draw a reel\n    for (let i = 0; i < reels[reel_id].length; ++i) {\n      const {x, y} = get_reel_draw_coords(reel_id, i);\n      ctx.drawImage(reels[reel_id][i], shift_x + x + reel_gap * reel_id, shift_y + y);\n      //ctx.fillText(`y: ${y.toFixed(2)}`, x, y+50);\n    }\n    move_reel(reel_id, dt, generate_next_symbol);\n    \n  }\n  ctx.restore();\n\n  ctx.save();\n\n  ctx.strokeStyle = 'rgb(37, 41, 28)';\n  ctx.lineWidth = 6;\n  for (let reel_id = 0; reel_id < n_reels; ++reel_id) {\n    const x = reel_id * slot_width;\n    const y = 0;\n    ctx.strokeRect(\n      shift_x + x + reel_gap * reel_id, \n      shift_y + y, \n      slot_width, \n      slot_height * n_rows);\n  }\n  ctx.restore();\n\n  if (current_state == state_winning) {\n    show_result(ctx, dt);\n  }\n  \n  if (!spin_button.enabled) {\n    ctx.drawImage(spin_button.disabled, spin_button.x, spin_button.y)\n  } else if (spin_button.clicked) {\n    ctx.drawImage(spin_button.pressed, spin_button.x, spin_button.y)\n  } else if (spin_button.mouse == 'in') {\n    ctx.drawImage(spin_button.hover, spin_button.x, spin_button.y)\n  } else {\n    highlight_time += dt;\n    if (highlight_time > spin_highlight_delay) {\n      ctx.drawImage(spin_button.highlight, spin_button.x, spin_button.y)\n    } else {\n      ctx.drawImage(spin_button.normal, spin_button.x, spin_button.y)\n    }\n    if (highlight_time > spin_highlight + spin_highlight_delay) {\n      highlight_time -= spin_highlight + spin_highlight_delay;\n    }      \n  }\n  ctx.restore();\n  \n  const drawWrapper = t => draw(ctx, t);\n  window.requestAnimationFrame(drawWrapper);\n}\n\n\n\nfunction spin_stop() {\n  switch (current_state) {\n  case state_idle:\n    console.log(\"was idle, pressed SPIN\"); switch_state(current_state, state_spinning); break;\n  case state_spinning:\n    console.log(\"SPIN while spinning = STOP\"); force_stop(); break;\n  case state_stopping:\n    console.log(\"SPIN while stopping = STOP\"); force_stop(); break;\n  case state_winning:\n    console.log(\"SPIN while winning = BREAK\"); switch_state(current_state, state_spinning); break;\n  default:\n    console.log(`some other state: ${current_state}. How?`)\n  }\n}\n\n// function on_key_down(e) {\n//   var code = e.keyCode;\n//   switch (code) {\n//     case 32: spin_stop(); break; // spacebar\n//   }\n// }\n\n//Function to get the mouse position\nfunction getMousePos(canvas, event) {\n  return {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n}\n\n// window.addEventListener('keydown', on_key_down);\nfunction isInside(pos, btn){\n  const scale = width / maxWidth;\n  const x = (btn.x + btn.a) * scale;\n  const y = (btn.y + btn.b) * scale;\n  const rx = btn.a * scale;\n  const ry = btn.b * scale;\n  return Math.pow(pos.x - x, 2) / Math.pow(rx, 2) \n    + Math.pow(pos.y - y, 2) / Math.pow(ry, 2) <= 1.0;\n}\n\nfunction init_reels() {\n  slot_images = new Map([\n    [BS, ['/images/slots/samurai/bonsai.jpeg']],\n    [CH, ['/images/slots/samurai/chest.jpeg']],\n    [CR, ['/images/slots/samurai/crab.jpeg']],\n    [JD, ['/images/slots/samurai/jade.jpeg']],\n    [LA, ['/images/slots/samurai/lantern.jpeg']],\n    [NJ, ['/images/slots/samurai/ninja.jpeg']],\n    [PA, ['/images/slots/samurai/panda.jpeg']],\n    [RI, ['/images/slots/samurai/rice.jpeg']],\n    [SM, ['/images/slots/samurai/samurai.jpeg']],\n    [SU, ['/images/slots/samurai/sushi.jpeg']],\n    [TR, ['/images/slots/samurai/turtle.jpeg']],\n  ]);\n\n  for (const value of slot_images.values()) {\n    value.push(new Image());\n    value[1].src = value[0];\n  }\n  \n  reel_positions.fill(start_position);\n  reel_position_offsets.fill(start_offset);\n  for (let r = 0; r < n_reels; ++r) {\n    init_reel(r);\n  }\n  \n  \n  const canvas = document.getElementById('reels');\n  if (!canvas) {\n    console.error('no canvas')\n    return;\n  }\n\n  canvas.addEventListener('mousemove', function(evt) {\n    const mousePos = getMousePos(canvas, evt);\n    if (isInside(mousePos,spin_button)) {\n      spin_button.mouse = 'in'\n    } else {\n      spin_button.mouse = 'out'\n    }\n  }, false);\n  canvas.addEventListener('mousedown', function(evt) {\n    const mousePos = getMousePos(canvas, evt);\n    if (isInside(mousePos,spin_button)) {\n      spin_button.clicked = true\n    }\n  }, false);\n  canvas.addEventListener('mouseup', function(evt) {\n    const mousePos = getMousePos(canvas, evt);\n    if (isInside(mousePos,spin_button)) {\n      spin_button.clicked = false\n    }\n  }, false);\n  canvas.addEventListener('click', function(evt) {\n    const mousePos = getMousePos(canvas, evt);\n    if (isInside(mousePos,spin_button)) {\n      spin_button.clicked = false\n      spin_stop()\n    }\n  }, false);\n\n  spin_button.normal = new Image();\n  spin_button.disabled = new Image();\n  spin_button.hover = new Image();\n  spin_button.pressed = new Image();\n  spin_button.highlight = new Image();\n  spin_button.normal.src = '/images/idea-generator/spin_button.png';\n  spin_button.disabled.src = '/images/idea-generator/spin_button_disabled.png';\n  spin_button.hover.src = '/images/idea-generator/spin_button_hover.png';\n  spin_button.pressed.src = '/images/idea-generator/spin_button_pressed.png';\n  spin_button.highlight.src = '/images/idea-generator/spin_button_highlight.png';\n  \n  background = new Image();\n  background.src = '/images/slots/samurai/background.jpeg';\n\n  if (!canvas.getContext) {\n    console.error('canvas without context')\n    return;\n  }\n\n  const ctx = canvas.getContext('2d');\n  \n  setUpCanvas(canvas);\n  \n  window.addEventListener('resize', () => {\n    console.log('resize');\n    // Clear the canvas.\n    ctx.clearRect(0, 0, ctx.width, ctx.height);\n    // Draw it all again.\n    setUpCanvas(canvas);\n    last_timestamp = 0;\n    draw(ctx, 0);\n  });\n\n  const drawWrapper = timestamp => draw(ctx, timestamp);\n  window.requestAnimationFrame(drawWrapper);\n}\n\nfunction setUpCanvas(canvas) {\n  // const { clientWidth, clientHeight } = canvas.getBoundingClientRect();\n  const ratio = maxWidth/maxHeight;\n  canvas.width = canvas.clientWidth;\n  // canvas.height = canvas.clientHeight;\n  canvas.height = canvas.width / ratio\n  width = canvas.width;\n  height = canvas.height;\n}\n\nexport { init_reels };","import React from \"react\"\nimport Layout from \"../../components/layout\"\nimport { SEO } from \"../../components/seo\"\nimport { init_interface } from \"../../components/slots/interface\"\nimport { init_reels } from \"../../components/slots/samurai-reels\"\nimport * as styles from \"../../components/slots/index.module.css\"\n\nclass TheLastSamurai extends React.Component {\n  componentDidMount() {\n    init_reels();\n    init_interface();\n  }\n\n  render() {\n    return (\n      <Layout\n        title=\"The Last Samurai\"\n        section=\"slots\"\n      >\n        <p>\n          A special symbol populates all reels one by one by crushing them.\n          But only when some special symbol lands on tha reel\n        </p>\n        <p>\n          Stacked symbol on the first reel stops in the full length, then a fighter shoots from the right.\n          Other reels spin.\n          If the same symbol appears on the next reel, the fighter hits the next reel and fills it all.\n          Now, he is on the second reel.\n        </p>\n        \n        <div>\n          <canvas className={styles.slotmachine} id=\"reels\"></canvas>\n          <canvas className={styles.slotmachine} id=\"ui\"></canvas>\n          <div id=\"slot-machine-result\"></div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default TheLastSamurai\n\nexport const Head = ({ location, data, pageContext }) => (\n  <SEO \n    path={location.pathname}\n    data={data}\n    frontmatter={data?.markdownRemark?.frontmatter}\n    pageContext={pageContext}\n    title=\"The Last Samurai\"\n  >\n\n  </SEO>\n)","// extracted by mini-css-extract-plugin\nexport var slotmachine = \"index-module--slotmachine--196e2\";"],"names":["_React$Component","LayoutBase","props","_this","call","errorCallback","bind","menuClicked","closeCallback","closeMenu","searchClicked","state","menuOpen","searchOpen","errorMessage","_inheritsLoose","_proto","prototype","this","setState","openMenu","render","children","title","published","publishedText","lastUpdated","updatedText","section","subsection","buttonText","buttonLink","secondButtonText","secondButtonLink","featuredImage","bannerParagraph","mainConf","languageName","imageData","getImage","wideImage","getSrc","React","FeaturedImage","image","banner","Banner","header","Header","language","menuClickedCallback","searchClickedCallback","fullscreenMenu","MenuPopup","fullPage","className","Search","MainBase","Object","assign","Footer","Layout","LayoutNavigation","balance","bet_per_line","total_bet","win","init_interface","update_balance_label","update_bet_label","update_total_bet_label","update_win_label","on_spin_started","on_winning_result","total_win","text_result","element","document","getElementById","innerHTML","update_result_label","slot_width","slot_height","shift_x","width","height","BS","CH","CR","JD","LA","NJ","PA","RI","SM","SU","TR","strips","lines","spin_button","x","y","a","b","enabled","clicked","mouse","slot_images","Map","reels","length","reel_positions","reel_position_offsets","start_offset","invisible_rows","t_spinning","t_stopping","k","showtime","n_slots_spinned","n_reels_stopped","t","max_t","result","state_idle","on_enter","on_leave","state_spinning","fill","Math","sqrt","n_draw_calls","symbols","reel_id","virtual_stop","random_virtual_stop","slot_id","get_strip_symbol","random_result_symbols","console","log","set_result_symbols","next_state","state_stopping","state_winning","current_animating_line","animating_slots","current_state","switch_state","s1","s2","strip","floor","random","offset","get_slot_image","symbol_id","get","random_slot_image","random_symbol","init_reel","i","n_rows","push","force_stop","id","on_reels_stopped","parse_result","generate_next_symbol","pop","slot_image","unshift","t1","move_func","pow","move_reel","dt","next_symbol_callback","get_reel_draw_coords","spin_highlight_delay","highlight_time","background","last_timestamp","draw","ctx","timestamp","fillStyle","fillRect","save","scale","drawImage","beginPath","rect","clip","restore","strokeStyle","lineWidth","strokeRect","line","slots","slot","show_result","pressed","hover","highlight","normal","spin_highlight","disabled","window","requestAnimationFrame","getMousePos","canvas","event","offsetX","offsetY","isInside","pos","btn","rx","ry","init_reels","value","values","Image","src","r","error","addEventListener","evt","spin_stop","getContext","setUpCanvas","clearRect","ratio","clientWidth","TheLastSamurai","apply","arguments","componentDidMount","styles","Head","_ref","_data$markdownRemark","location","data","pageContext","SEO","path","pathname","frontmatter","markdownRemark","slotmachine"],"sourceRoot":""}